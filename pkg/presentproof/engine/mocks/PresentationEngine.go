// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	common "github.com/scoir/canis/pkg/protogen/common"

	mock "github.com/stretchr/testify/mock"
)

// PresentationEngine is an autogenerated mock type for the PresentationEngine type
type PresentationEngine struct {
	mock.Mock
}

// Accept provides a mock function with given fields: typ
func (_m *PresentationEngine) Accept(typ string) bool {
	ret := _m.Called(typ)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(typ)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RequestPresentationAttach provides a mock function with given fields: attrInfo, predicateInfo
func (_m *PresentationEngine) RequestPresentationAttach(attrInfo map[string]*common.AttrInfo, predicateInfo map[string]*common.PredicateInfo) (string, error) {
	ret := _m.Called(attrInfo, predicateInfo)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]*common.AttrInfo, map[string]*common.PredicateInfo) string); ok {
		r0 = rf(attrInfo, predicateInfo)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]*common.AttrInfo, map[string]*common.PredicateInfo) error); ok {
		r1 = rf(attrInfo, predicateInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestPresentationFormat provides a mock function with given fields:
func (_m *PresentationEngine) RequestPresentationFormat() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
