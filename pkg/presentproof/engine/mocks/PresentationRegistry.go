// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	common "github.com/scoir/canis/pkg/protogen/common"

	mock "github.com/stretchr/testify/mock"

	presentproof "github.com/hyperledger/aries-framework-go/pkg/client/presentproof"
)

// PresentationRegistry is an autogenerated mock type for the PresentationRegistry type
type PresentationRegistry struct {
	mock.Mock
}

// RequestPresentation provides a mock function with given fields: typ, attrInfo, predicateInfo
func (_m *PresentationRegistry) RequestPresentation(typ string, attrInfo map[string]*common.AttrInfo, predicateInfo map[string]*common.PredicateInfo) (*presentproof.RequestPresentation, error) {
	ret := _m.Called(typ, attrInfo, predicateInfo)

	var r0 *presentproof.RequestPresentation
	if rf, ok := ret.Get(0).(func(string, map[string]*common.AttrInfo, map[string]*common.PredicateInfo) *presentproof.RequestPresentation); ok {
		r0 = rf(typ, attrInfo, predicateInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*presentproof.RequestPresentation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]*common.AttrInfo, map[string]*common.PredicateInfo) error); ok {
		r1 = rf(typ, attrInfo, predicateInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: format, presentation, theirDID, myDID
func (_m *PresentationRegistry) Verify(format string, presentation []byte, theirDID string, myDID string) (bool, error) {
	ret := _m.Called(format, presentation, theirDID, myDID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []byte, string, string) bool); ok {
		r0 = rf(format, presentation, theirDID, myDID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte, string, string) error); ok {
		r1 = rf(format, presentation, theirDID, myDID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
