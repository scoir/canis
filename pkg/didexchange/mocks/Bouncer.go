// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	didexchange "github.com/hyperledger/aries-framework-go/pkg/client/didexchange"
	mock "github.com/stretchr/testify/mock"

	pkgdidexchange "github.com/scoir/canis/pkg/didexchange"

	protocoldidexchange "github.com/hyperledger/aries-framework-go/pkg/didcomm/protocol/didexchange"

	service "github.com/hyperledger/aries-framework-go/pkg/didcomm/common/service"

	time "time"
)

// Bouncer is an autogenerated mock type for the Bouncer type
type Bouncer struct {
	mock.Mock
}

// CreateInvitation provides a mock function with given fields: name
func (_m *Bouncer) CreateInvitation(name string) (*didexchange.Invitation, error) {
	ret := _m.Called(name)

	var r0 *didexchange.Invitation
	if rf, ok := ret.Get(0).(func(string) *didexchange.Invitation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*didexchange.Invitation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvitationNotify provides a mock function with given fields: name, success, nerr
func (_m *Bouncer) CreateInvitationNotify(name string, success pkgdidexchange.NotifySuccess, nerr pkgdidexchange.NotifyError) (*didexchange.Invitation, error) {
	ret := _m.Called(name, success, nerr)

	var r0 *didexchange.Invitation
	if rf, ok := ret.Get(0).(func(string, pkgdidexchange.NotifySuccess, pkgdidexchange.NotifyError) *didexchange.Invitation); ok {
		r0 = rf(name, success, nerr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*didexchange.Invitation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, pkgdidexchange.NotifySuccess, pkgdidexchange.NotifyError) error); ok {
		r1 = rf(name, success, nerr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvitationWithDIDNotify provides a mock function with given fields: name, did, success, nerr
func (_m *Bouncer) CreateInvitationWithDIDNotify(name string, did string, success pkgdidexchange.NotifySuccess, nerr pkgdidexchange.NotifyError) (*didexchange.Invitation, error) {
	ret := _m.Called(name, did, success, nerr)

	var r0 *didexchange.Invitation
	if rf, ok := ret.Get(0).(func(string, string, pkgdidexchange.NotifySuccess, pkgdidexchange.NotifyError) *didexchange.Invitation); ok {
		r0 = rf(name, did, success, nerr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*didexchange.Invitation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, pkgdidexchange.NotifySuccess, pkgdidexchange.NotifyError) error); ok {
		r1 = rf(name, did, success, nerr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstablishConnection provides a mock function with given fields: invitation, timeout
func (_m *Bouncer) EstablishConnection(invitation *didexchange.Invitation, timeout time.Duration) (*didexchange.Connection, error) {
	ret := _m.Called(invitation, timeout)

	var r0 *didexchange.Connection
	if rf, ok := ret.Get(0).(func(*didexchange.Invitation, time.Duration) *didexchange.Connection); ok {
		r0 = rf(invitation, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*didexchange.Connection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*didexchange.Invitation, time.Duration) error); ok {
		r1 = rf(invitation, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvitationMsg provides a mock function with given fields: e, invite
func (_m *Bouncer) InvitationMsg(e service.DIDCommAction, invite *protocoldidexchange.Invitation) {
	_m.Called(e, invite)
}

// RequestMsg provides a mock function with given fields: e, request
func (_m *Bouncer) RequestMsg(e service.DIDCommAction, request *protocoldidexchange.Request) {
	_m.Called(e, request)
}

// Unregister provides a mock function with given fields: ch
func (_m *Bouncer) Unregister(ch chan service.StateMsg) {
	_m.Called(ch)
}
