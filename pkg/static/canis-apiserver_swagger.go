package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec\\mo۸\x96\xfe\x9e_qV\xbb@\x93\xbd\xber\x9a\x19̇\f\x02l\xa6I;\x19\xa4i\xe08\x18,\xaa\xc0\xa1\xa5#\x9bS\x8aTI*\xa9\xa7\xc8\u007f\xbf )ْ\"\xbf'i\xddq\x81±H\x1e><\xe79/\x14%\u007f\xdd\x01\xf0\xd4=\x19\fPz\x87\xe0\x1d\xf8\xfb^\xcb\\\xa3<\x16\xde!\x98v\x00OS\xcdд\xbf!\x9c*8\x8e\x12\xca\xe1\xf8\xf2\xcc\xf6\x05\xf0\xeeP**\xb8\xe9\xb1\xef\xef\xfb\a\xde\x0e\xc0\x83\x95\x13\n\xae\xb2\x04\x95w\b\x1f]_\x92\xa6\x8c\x86DS\xc1\xdb\u007f)\xc1M\xdf\x1b\xdb7\x95\"\xca\xc2\x05\xfb\x12=T\x13\x80m2@\xae'\x17\x00\xbc\x01\xea\xd2W\x00O\xa4(\xad\xa8\xb3\xc8\x00\xb5\x8b\xe8\x9dS\xa5\x8f\xcd\xd8|)\xb6\xa7D\x95\n\xaePU\x04\x00x\a\xfb\xfb\xb5K\x00^\x84*\x944չ\x02\x8eAea\x88J\xc5\x19\x83B\x92_\x12o\a\xa9p\x88\ty$\f\xc0\xfb\x1f\x89\xb1\x91\xf3\xdf\xed\bcʩ\x91\xab\xda$\xa5\n\xe5\x1d\xca1\xe0N.ګ\bx(}{(\xcf\xe9E\x18\x93\x8c\xe9\xf9\xf89d\x1c\xbf\xa4\x18j\x8c\x00\xa5\x14r\xbc\x8cuW!3\xaei\x82\xa7F\xe8\f\xdc;\r+\xf0R\"I\x82\x1a\xe5\x84\x1f\xee_m9\x9c$\x96\xaaJ\x13\xa9뀩]\xe2\xe7\f\xe5\xa8\xde$\xf1sF%\x1anĄ)\xac5\xebQ\x9a\x8b\x95\x94\x0f\xea\x83c!\x13bt\xebQ\xae\u007f\xf9ٛf\x85)XS2\xc0\x9e\xa2\u007f\xe3\x86ൟ\xcf\x05\xb5\x91\t7%&h2\xa8s\xc0y\xf3d\xe8\xcdNm1^*\xd4\"\xf1\xe0\x8dD\xa2q\xa3\"B\t\xf26&\xcc\xe6m_D\xa3f\xde6\xb5\x94h\xabe\x86Oe/G\xae\x05V\xba*\xe7wJj*2c\xfb\xab\xfd\xf4i\xf4PN\x92\vz\xc5u\x1am\x9aW\x94 o\xbdb\xb6W\x14\xcch\xf6\fSi-\xe7\x193\xe2yk\xeb\xa3s}\xb4G\xa3\x87v(1B\xae)a\xed\xaf\xf8E\xa3\xe4\x84\xd9\x06\xaaT\x86+\xb8\xf0\x99\x19\xf7f,uSܸ\x06{\xeb\xca\v\xb8r\xef{q\xe5\x12q\xb7\xb1\xa5\\\xaf\x15N\xf8\r\x03\f\xe5wT\xbb\x9du%\xc0,\xbf\x85~\x87nCz6\x96\xb81\xc1e\x8cx\x1bW\xb6q\xe5\xd9\xf6\xa0\xf3\\1\x95\xa8\x9079cۀ\xc6J~_4\xdfw\xdc\xc8˒\xecMq\xcb\x06\xe8[\xff\xdc\xfa\xe7\xa6\xe7\xfd&\x8f|\xf1\x02`\xad\f\xbf)\x01\xa4\xc0\xbb\x8d\x1a\xb3\xddb3\xd2\xe7\xf8\x16n\x84\f5.\xc0\xd7\x13\xdbq\xa3([\x82\xbce\xed\x8f\xc0\xdaj\xf8}\xa4\xcf%\x8e'\xaf\xdc\xd8\r:\x9ft\x88\xb7<\xde\x1eP\xfe\xf0\a\x94\v`)\x1e\x8e\xf8\x81\xcfK7+D\x951o\x83\xd4\x06\xec\x9crz\xbd\xd8f\xc9\x01]}\xb3\xb4Y\xee0\x06\xbc\xf5\x85\u007f\xf2vi\xb3H[Ƽ\xe5폺aj\u007fu\x9fk=\xb6\xb2Y\xc4.c\xde\x12{\xce\x0e\xaa \xc7\xf6.\xf37\xab\x95\xee\xb1?\x14\xe2Ӫ\xb7\x96ϩ\xd2\u007f:\x11\x9bt\x87#\x87\xbcu\xd0\u007frŴa\xbc\xad\x80\xde2\xf7\x87b\xeeRwk6\x8c\xb7\x15\xd0[\xde~\a\xbcݠ'\xed\xca\xccq\x8f\xd2<{e4~\xf7\xad\x84i\xf2\xa6\x9a=\xe2\xbb\xd2Dg\x95\xb7զ\xdc\r\xf7\x90gIez\xef\xaa{\xdc\xe9\x9e]\xbc+\xbbo\xe7\xfa\xe2\xa2v\xe9\xb4\xd3\xf9\xd0)_\xe8\x9evޟ]\x1cwOO\n\xe47\xa5\xc4Wx\xc9D|\xa5̫=\x18\xdd\x00\\\xf4\xff\xc2pr\x9c\xe1\xa5\xd2D Mk!\xc5\x10\xb4\x16b\xa6\x11\xad\xec\x069\xad\x96\x1eG\x94\xa2\x03\x8eQ\xcfq\xa8\xb7\xda\xec\xc8#!\x15\xe93\x9c\xc8Q\xd3\x04\x11)I\x95\xe0\x1e\u0558\xa8\xc7!h\x91\xccP\x86\xa1\uab19\xe1\x03e\x9a5\a\x96\xac\xcfh؋\xa6k\xa4/\x04CR=\xb7(\x9d\xcb\x14\xcd;u\xd0\x0f3\x98sz\xb7&}\xf2\xfe\vh\xa0a\xe2\xae\x19ܨ\x8d\x0f,ZEj\xb3\xb0\v\xbc_Sآ\x9a\xecV\xb5\xb1D\x149>9)\a\x87\xeb˓\xe3\xeei\xf9\xca\xc9\xe9\xf9i\xf7tf\xa802\xa6 \xd4Z\x9e\x95\xdf ^\xc1ҫ\xba\xbcD\xd3\x1aV\xc3\xee2\xa1F\xf0\x9e\xc4;\xf1\t\xe7Ŋ)\x8e\x11\x11\x8d\xff6\t\u007fq\x83j-i?\xd3\xf8-\xf4\xb5\x8aG\x15xk\x0e\xb5\xe0*Wg\xedU\xb7SKs\x17\xd7\xef\u007f;\xad\xe4\xb9\x0f\xbf\xfdq\xfa\xa6[\xber\xdc\xe9\x1c\xff\u007f\xf9\xc2o\x1f>\x9cW\x85\x9c\x9f\xcfI\x8a\x9d\xe9)\xb1\xe9\xfd˗I\x90\xb3\xf5\xddx\xcc\xf9\xfd\x00\xab\x95e/^R\xe47\xae\xd6O\xe3s\x9c\xa5\xd8m5\xa7\xf7\xa545׆S\xa5\x14/\x9c\xac\xa1\xe5\xb5*\xa8P$I5\xf3\xaf\x15\x9f\x16*\xfd\x8ap\xa3\x9e\xdd\xc4\x13\x05O\"\xf9\x8a\xe6~$\xe7\x1bd\x84;\xc22|\"_oz\xaeqY\xfe6\x9e\xf5\xad&d]Wz\xf4d\xf1\x1a\xe6!\x83\x06\x8fx\xd2B\xf1\xf1\xc9\xfe\xda\xfe\xbf$\xde\xfai\xc4\x1c\xc0\r/d\xad\x93\x17&/\xa4=\r\x99\xa7\xbd\x8c\xba\x06\xc6\xc9{\xbe\xbd'˯\x8f\u007f\"f\x1d\x80\"\x9b\x1b\xb7\xa7\x14µ'\xf7*\xc1\xb9\xfes=\xcf\x13\x98\x1f\xbd\xc6\xfd\xb0\x8c\x0e\x9f\xcew\x9eG\x89\xcd\x1e\xf9\xe4J||\xa2\xb8\x94\x16\x17\x0f\xb9s\xd5h\x0f\x1a\xbf\xeb\x82\xedRbDC\xa2\xf1[\xed~\xd3ު\xf5R\xda[.\xefo\xf6\x96\xbb\xe9e\xac\u007fPq|O\x19녂\xc7T&Ov\xff\xaf\xc2\b\xab^\x8cz\xf3\xcb\U0001a39d\x9d\xa2Ⱥ%a\x97\xcd\x1a_\xf46\x85\xf5ùwV'p\xd3\u0081_\x1en5v\xac\x12}f\xbd8\xbb\x06\xb9s\xed\xf4\xca\xef)?]\xb5r\xf5\xe8\u0558\xef\xfbHa\xf2[\x87/\xe6\xadc\xa7[!\xb4p\x8d_\xf4˟U\xbc\xe0\xee{\xbd=\xf7\x15bti\xcfBN\xceNV\xde\x176\xfd\xda\xd4j2\xd6\xdc\xe6\xfe\xf9\xe8\xae\xd6\xd2\xee\x94I\xb6\x9ek\xa7Rh\xd1\xcf\xe2c>Z\xf7\xa8\xa77\x1fL\xed\xb8\xbf\xf6d\xc2u\xe7\xbc-Q\x89L\x86\b\xc6\xe5A\x0f\x89\x86\x8c\xd3\xcf\x19\xb2\x11P\xbb\xfb\x8a)*\xd0C\x04#\x1bDl\xffV()a\xf4o\x8c\x02n\x97\x14\n\x06\xfd,\x8eQB\x82J\x91\x01\xfa\xd0\x1d\"0\xa24(\x1c\x98$^\f\xbe\ue73fR\x90\x12=\x84$S\x1a$\xe6\xd13\xe0\xa69\xce\x18\x1b\xc1\xe7\x8c03w\xe4\x90\xe5C-\x86]\xa2\x80\xf2\x80\xdf\x1a\x11\xed\x81\x10\x03\x86~\xa1X\xff$s\xcfv\xdc\xee9\x04v\xb8\x1a\x8a\x8cE\xd0G\xa0\x1c\b\x84\x84\vNC\xc2\xc0\x84\x8f\x80\xef\xa2?\xf0[\xc0\x90D\x94\x0f \xf0\xfc\xc0\x03\xaa\x80\v\r$\f1\xd5\x18\xed\xf9\x01\x0f\xf8\x19\x87T\x92P\xd3\x10[\xa0\x91$\n2\x95\x11\x838\x95\x18\x8a$\xa5\xccL\xa2\x85\xc5ۧ\x9c\xc8\x11\x10\xc6,t\xe54\xac\x878\n\xf2'*\x80j\xd0\x022e\xa1\x991y\\2K>\xe6#\x1f~\x17\xf7x\x87\xb2e\xb0\x1a\xdd)\xb8\x1f\xd2ph\x87\xe8!\x06\xdc\x16X\b\xb7C\xad\xd3ۖ\xfbT\xb7-\x10\x12\xb8\x00\xd7\xda\x02\xc1Ѭ\x1bD\xea\xb21\x1b\x81B\rY\n\xc4b\v\xb8\xf3\x12\a1!\xa9rڶ3jQ\x98\x15Jq\x06\x88\x82X0&\xeeաQ\xce\xff\xc2Y<\x99\xd2(0\x95\xe2\x8eF\x18\x8dQ\x99\x8bD\xa9,\xc1\xc87\x03\x8e9\xfc\xde\xed^»\xd3.\b^\xd0\xc3\xf1bD\x91E@\xe0c\xdd\xc4\xddQ\x8a7\x1fo\x02\x0e`\xebr\xa3\xb9\\\xd3.\x1dص\xe7?\x99\v\x84\xbbgV\xdc|\x93_\xcdU@$\x1aӈ{\x8c\xcc\nC\x12\x1a\xc6\n\xf1)KA\xa2ʘV\xd0'\n\xa3\x1c\x9a\x99\xf0\xbasn\xa5\x0fɝU\u007fR\xb2{\xe4\fO\n0\xe6\xef;A# |d\xc6:і\x96\x12c!\xb1U\xf44\x02\x88\xa6}ʨ\x1e\x01G\x8c\xac\xce\xfb\b\xd65\xe4\x9dq400\xc2!\xe1\x03\xb4\xad\x96Q>\xec^+\x84<\xf3\x9a\x85\x18\xa3\x19\xd2;\xab\x11N\x06\x16x_\"\xf9d\u061dK\xf0\xf7\x8c\xc9.\x84\xc6C\xd0C\xaa \xcex\xe8\xa8a0\xe4\xec\x0f3)\x91k6\x02rG(#}6橈c\x1aR\xc2\xf2\b\xd0\xcfb\x90Ȑ(l\x01\xe1\x91!v.$3*4\xec\x9d\x10\xaa\x8f\x03ʹ\x81sO\xf50\xe0\xa6\xc5wv6\xf1\xda\x0fEb\xfd͆|T \xf4\xd0Q\x93\xd7y\x0e\xbbF\xf0\x10\x01\x93T\x8fr\xee\xedAB\aC\r}\f\xb8\x9d\xdd\xcc\x024I\x19&E\x99\x06*Ő\xc64\x04\x85\tᚆ\xca_\xfd\xa6ﴝ\xc0H\xe3\xcc0\xfc\xde0\xbd\x8f@\f\x95iT\x8a\xacP\x0f\xacy\f$}q\x87\x05\xf8\xdc\xe0~C\xde)\x1d\xd6Uf\xbc=\xe6\xa3[\x1be\b5N\xc0\x81\xc8>\xd5\xd2\xf0p\xc6\xec\x85\xff\x13&r\xab\x01\t\xb8qV\x1b0\xdc$\xfd\x99\xb9b\x9c\x1a\x8ce/\v\xd20ڷs\xe7\xb1B\x81\xca\xd2TH\x1b\x16S\x12~jg\xdc|\x98`\xe8\xdc]\x15\ft\xc1[Đi\xe78\x05\x85\x95\xf1\xd0\xc9\xc6\x03\x06\xc8Q\x12m\x11衈T\x81\xcdȴ\xfa3\x88N\xbf\x10C\x10x}\b\x97fBC\xe2|n2^>\xe5\xf0\xe6_\xff\xb2\xfd\x8dr\xdf\n\x01\xb1\x10p\x04\xbe\xef\xff\xea\xae\x19\xa1\x84\x8f\xf2o\x84\x8f|#\xee\xad\x14\xc9n,\xc4^~\xdd\xf7}\xf7\a\x8da\xd7t\xba\xb6Su\xc5n\x90\xed\xef\x1f\xfcb\xba\xee\xc1Wק\xd4\xfd\xa1\f\xf5`\x0e\xd4?\xc8\x1dY\x04+\x1c\xd9\\c\x04\xcc\xc4H\xd5\xee[!\xfc\x90\x11\xa5\xca\xe8\x9cX\xd3á(\xf5\xfa\xb5\x04\x1b\n\xdc?\xcd\xc1}9\xd2C\xc1\xc7ȝ\xf8\xb7B\xec\xfa\xbe\x89[\xb9^\x1d\xeaݽ\xaa\xa2\xed\x02\x1e\xe37\xcdg\x0e\xfe\xc9\xe9՛\xce\xd9e\xf7Cg\xef\xb0X\xc1\xc4\x02\xa5\xf1\xb9\x84\x12\xf0\x9f\xe7\x00\u007f'\n\xcc\x16\xf4\xe1\x118k\xa6}\xff\xad\x10_}\xdf\u007fț\t\x1f\xb5Lb2}R\x17\xca\xdf\x13\xa9\x86\x84\x995\x950\x8c\x17\xd1(\xb1\x10G㚰k\x9eL\xc4\xd9ɬam\xaf\xff:\x02N\xd9\xc4|\xa59\xac\x9dL\xddd\xd7V\xb8K\x91ǡ?\x82\xb4\xee\xb8\xf7\x941Ӑ?\x14`\xc2}\xc0_5D\xf4\xb6)\xed|\xdb`\x12\xd4+S?\x8c\xa3\x85\x89$F\xab\xe6\x82\xd3l\xc0\xc7\xde\xca٨\xa8w\x1eՇ\xe3\x84\a$\xd6\xe8r\x81-;_\xb5_\x05<\x0f\x15\xc5\x14\xae\x8a\xc2ܚ\x81\x17\v\xe1\xf7\x89\xb4辴G\xfe߁\xe7\xd6\xe3\x8a\x0fW\x18Y\xe1\x81g[-\x1d\x02\xfe\xc7Շ\x8b\x80\x1f\x1d\x1d\x1d9m\x99\xef\x93B\xd6\xe5\x17aH\a.ܺ:%Sy|\x948\xc8\x18\x91\x01\u007f<\xc44G8\t\x9a-\xc0\xa4\x8fQ4\t\x9f\xad<\xfa\xf2\x80\x97b\\l\x01\xdf\xfe\x9f\x81|\x9b\x97\x88\xe3 _V\x81_\x90\xf9\xb0\xa0\xaaQ\xb6\xe1\xef\xa4Ί)\xc3\xdcq\vr_\xa2T\x82O8\xe3\xf2\x1e\xc4T*ݳ\x1a:\x82\u05ff\xd6Z\x8d\x1d\x8aƃJ$\x00\x98\x88\n<\x8b:\xf0\x0e!\xf0\x9axS\x05\xe6;(\x81ך\b\xb00.H\xe2\x84d\xfb\xfb?\x85\x0e\x82\xfd\x1bK=\r\xa4\xe9\x1dK\x10\xcf⼬\xa8j\xdf\xe9\x91*\xb8G\xc6\xfe\xfd\x89\x8b{ny;$\xca\xec,2\xa5E\x02\x8e\x1eU\xe3\xb6\\\xa2\xacY\xdc9Oi\x1acR>\x00\xe2\f\x1a\xf0[K\x9d¢C\xc1\"g\xce\xd2LvS\x933\x01\xf2\x9dGN\x84\x80[1c\x9bî\xe1\u007f\xb1\x94\x8f\xd36O7\x1fo\xf6\x0eױSU\\\xc5Tv=N\xc6k\xff\xe0\xf5\x81\n\xbc\\\xeb\xd5}{\xe5\xd1\xf05\xf6\xcaX\x13\xb0\xc4\r\xa2hj\xd5G\xb9\xc6\x01\xca\x19'S?\x1d4K\xcdu\xbf\n\xa0\b5\xa1\xec\xd9\xee\x1a\x95\xefM,q\xbb(\xb7ӕ\x96H\x92\xb5\xad5\x90i\xd8{\x1e͛\xfdB\xef\xbb3\xaaE\xd5\xfc\xf8\xf2\x06rb\xc7\xfc\u007f\xd8\xf9O\x00\x00\x00\xff\xffn\xc0\x84e<g\x00\x00",
		hash:  "1128eac9d3c8668700485f67d8601bb3e42e2a6dd3ac93f3ab0d0f6787ce171a",
		mime:  "application/json",
		mtime: time.Unix(1602787616, 0),
		size:  26428,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
