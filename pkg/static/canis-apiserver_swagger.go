package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec[\xdfo۸\xb2~\xcf_1W\xf7\x02M\xee\xfa\xc8iv\xb1\x0fY\x048\xde\xc6\xedf\x91\xa6\x81\xe3<\x1cTABI#\x9b[\x89TI*\xa97\xc8\xff~0\xa4dˊ\xed8v\xdaS\xf7\xb8@\xe1X$\x87\x1fg\xbe\xf9\xf8C\xf4\xfd\x0e\x80\xa7\xef\xd8`\x80\xca;\x04\xef\xc0\xdf\xf7Z\xf4\x8c\x8bDz\x87@\xe5\x00\x9e\xe1&E*\u007f\xc3\x04\xd7Љ3.\xa0s~b\xeb\x02x\xb7\xa84\x97\x82j\xec\xfb\xfb\xfeko\a\xe0\xc1ډ\xa4\xd0E\x86\xda;\x84\x8f\xae.\xcb\xf3\x94G\xccp)\xda\u007fi)\xa8\ue56d\x9b+\x19\x17ђu\x99\x19\xea\t\xc06\x1b\xa00\x93\a\x00\xde\x00M\xed+\x80'sT\xd6\xd4IL@\xed \xaeO\xb96\x1dj[\x0e\xc5\xd6T\xa8s)4\xea)\x03\x00\xde\xc1\xfe~\xe3\x11\x80\x17\xa3\x8e\x14\xcfM\xe9\x80\x0e\xe8\"\x8aP\xeb\xa4H\xa1\xb2\xe4\xd7\xcc\xdbF:\x1ab\xc6\x1e\x19\x03\xf0\xfeOaBv\xfe\xb7\x1dc\xc2\x05'\xbb\xba\xcdr\xaeQݢ\x1a\x03\ue566\xbd)\x03\x0f\xb5o\x0f\xf5>\xbd\x18\x13V\xa4\xe6i\xfc\x02\n\x81_r\x8c\fƀJI5\x1eƺ\xa3P\x850<\xc3.\x19]\x80{g\xc6\b\xbc\x9c)\x96\xa1A5\xe1\x87\xfb\xd7\x18\x8e`\x99\xa5\xaa6L\x99&`n\x87\xf8\xb9@5j\x16)\xfc\\p\x85č\x84\xa5\x1a\x1b\xc5f\x94\x97f\x15\x17\x83f\xe3D\xaa\x8c\x91o=.̯\xbfx\xf3\xa20\ak\xce\x06x\xad\xf9߸!x\xed\xe7ׂ:\x93\tW5&\x186hr\xc0e\xf3\xa4\xe9\xd5Nc0^.\xf52z\xf0F!3\xb8Q\x8aP\x83\xbcՄż\re<\x9a\xcd\xdbY%5\xda\x1aU\xe0K\xc5ˑk\x89\x91\xae\xca\xf9\x9d\x9a\x9b\xaa\x99\xb1}o?}\x1e?\xd4'\xc9%\xb3\xe22\x8f7-+j\x90\xb7Y\xb18+*f\xcc\xce\fZi=/3\x16\xe8yk\x9b\xa3O\xe6\xe85\x8f\x1fڑ\xc2\x18\x85\xe1,m\xdf\xeb\"\xfc\v#\xf7\x9ck]\xe0\n\x19|B\xedތ\x8dnJ\x167`o3y\x89L\xbe\xfe^2y\xc2\xdbo\x80\xe7\xabg$\x17\xb7ܸ\xad\xe8=~1\xa8\x04K\xafW\x9bNߡ\xdb\u009d\x8cMnL>\x8e\x11oSq\x93R\xb1F\xd8\xcd\xcd\xc5F\xb2-w\xc0S\xe5ڦdX\x85w\x9b_\x8b\x19\xbd\x19D\x1e\x1f?Ę\xa2\xc1%\xf8zl+n\x14ek\x90\xb7\xac\xfd\x11X;-\xbf\x8f\xfc\xf9\x8c\xa3\xf5\v\xd7v\x83\xce\xd6\x1d\xe2-\x8f\xb7\x87\xeb?\xfc\xe1\xfa\x12X\xaa\x17{?\xf0Y\xfffIT\x1d\xf3V\xa46\xe0$\xb1\xa4\xd77;Jt@W\xdf,mV:\x8c\x01os\xe1\xbfy\xbb\xb4Y\xa4\xadc\xde\xf2\xf6G\xdd0\xb5\xef\xdd\xe7Z\xaf\\7\x8b\xd8u\xcc[b?\xb1\x83\xaaȱ}\xeb\xfa\xcd\xd7J\xe3ۉ5\x14\x93\xbb\x84\xf6 \xeb\xc20SL\xdd'\x9c\xb3\xe7\xf3P\x14\xd9T\xf7\xdeE\xbf\xd3럜\xbd\xab\xa7m\xef\xf2\xec\xac\xf1\xa8\xdb\xeb}\xe8\xd5\x1f\xf4\xbb\xbd\xf7'g\x9d~\xf7\xb8B~U\x9b\x10\xab\xf4\x98\x98\x9fR\x9dƫ\xeb\x19\xc0\xa5}\x1b7\x01\x9e+\x12\x1e\xc3\x1bRB\x92ې\x96yԪ\xf3\xbf$ҳ\xdb1\xad\xf9@`|\xedXs\xbdZ\xef(b\xa94\vS\x9c\xd8\xd1\xf3\f1\xa5\xd84\xa5=n0ӏ\xb5g\x999\xa3\x0eC7Y\xb3\x80\xf5u\x9a\xcdV\x94\"Lyt\x1d\xcf\xf7H(e\x8alzw^;}\xa8\x8aw\x9a\xa0\x1f\x160\xa7{\xbb&}\xca\xfaKx`F\xc7}j<\xd3\x1b\x1f\xd2x\x15\xab\xb3\x8d\x9d\xe1ݚƖ\xf5d\u007f\xda\x1b\xcfP\x91\xce\xf1q]\x1c.Ϗ;\xfdn\xfd\xc9q\xf7\xb4\xdb\xef.\x94\n\xb21\a\xa11\x8a\x87\x85\xc1uB\xbdjίB\x91\no\x83!O\xc4a\xaaՊb\xdek\xe8\xf6\xd9\xe5\xfb\u07fbS\xc2\xfd\xe1\xf7?\xbbo\xfa\xf5'\x9d^\xaf\xf3\xaf\xfa\x83\xdf?|8\x9d6rz\xfa\x84\xca\xf7\xe6k\xfc\xac+\x9f\xdfF\xf1\x17\xfb{\xe6\xe9\xd4w\x02\xac\xba\xf9\xb4\x06\x9c\xb5\xa6\xa8Hfٴ\xb4.?GV4~\x81)\xed\xe9\xf3\xc5\xd2Q\x13\x85\x98=\xed-\xeb\xf0\xff\xa8\xd2ܲ\xb4\xc0\x17\xe2Ьל\xf3\x87\xb4\xc8\xc6\xd2\t2\xdbȣ+\x02k8\x96\rfp\xf2E\xe7\xc2\xc7Gtkg\xe03\xf16\xb7\x15O\x00\x9eq\xc7i\x1d\t\x9b\xdc\xf1z\x19\x1aλ\x12\xb9\x06\xc6\xc9e\xd3\xeb\x17S\xdcǿSZ\a\xa0,\x9eT\xce9\x8b\xe0\xc6+\xb8)Ym\xfef\xec\xebHꣻ\xc4\x0f\xcf\xf1\xe1\xcb\xe5\xce\xd7q\xe2\xec\x8c|q'>>\x1aXڋ\x17\x8f\xee/|\xdf;\xe2ɏ)_da\xfd\x9d-0\xd6[V\\ \xc6\xe7v_||r\xbc\xf2\x04:\xeb\xb7!\xab\xd9Xm&ϕ42,\x92\x8e\x18\xad\xbbӾ.T\xfa\x9c\x9c~t |\xd9;m+ԲP\x11\x02Q\x16̐\x19(\x04\xff\\`:\x02ng\x86\x84\xa3\x063D \xdb \x13\xfb\xb7F\xc5Y\xca\xff\xc68\x10vH\x91L!,\x92\x04\x15d\xa85\x1b\xa0\x0f\xfd!Bʴ\x01\x8d\x03Z\xffV\x8d/{\xa7\xaf4\xe4\xcc\f!+\xb4\x01\x85\xb9B\x8d\xc2\x04\x82\x8a\x93\"MG\xf0\xb9`)\xf5\x1d;deS\x8ba\x97i\xe0\"\x107d\xa2=\x90r\x90\xa2_9\xd6?.܉\xfa͞C`\x9b\xeb\xa1,\xd2\x18B\x04.\x80AĄ\x14<b)\x90\xd0\x05b\x17\xfd\x81߂\x14Y\xcc\xc5\x00\x02\xcf\x0f<\xe0\x1a\x844\xc0\xa2\bs\x83\xf1\x9e\x1f\x88@\x9c\b\xc8\x15\x8b\f\x8f\xb0\x05\x06Y\xa6\xa1\xd0\x05#Ĺ\xc2Hf9O\xa9\x13#-ސ\v\xa6F\xc0\xd2\xd4B\xd7\xce\xc3f\x88\xa3\xa0<\xc9\x06n\xc0H(\xb4\x85Fm\")\f~\xb1\xdeꈑ\x0f\u007f\xc8;\xbcE\xd5\"\xac\xe4;\rwC\x1e\rm\x133\xc4@X\x1dF\xb8\x19\x1a\x93ߴܧ\xbei\x81T $\xb8\xd2\x16H\x814n\x90\x96\x01\x16\xb1F\x03E\x0e\xccb\v\x84c\xb7\x83\x98\xb1\\;o\xdb\x1e\x8d\xac\xc2\n\xb5\xd4\x06\xa6!\x91i*\xef\xf4!9\xe7\xff\xe1$\x99tI\x0e̕\xbc\xe51\xc6cT\xf4\x90i]d\x18\xfbԠ#\xe0\x8f~\xff\x1c\xdeu\xfb EE\x0fǋ\x11\xc74\x06\x06\x1f\x9b!\xa6-\xfd\xd5ǫ@\x00\xd8U>y\xae\xf4\xb4\x9b\xb8\xec\xd8\xcbߔ\x03\x13\xee]\x81\xebo\xf2\xb3r\rL!\x85F\xdeaL#\x8cXD\x8c\x95\xf2S\x91\x83B]\xa4FC\xc84\xc6%4\xea\xf0\xb2wj\xad\x0f٭u\u007fV\x8b{\xec\x02\xcf*0\xf4\xf7\xad\xe4101\xa2\xb6δ\xa5\xa5\xc2D*lU5\xc9\x003<\xe4)7#\x10\x88\xb1\xf5y\x88`SC\xddR\xa2\x01\xc1\x88\x86L\fЖZF\xf9\xb0{\xa9\x11ʙ\x83\x06BA#һ\xa81\xc1\x06\x16x\xa8\x90}\"v\x97\x16\xfc=\nٙ4x\bf\xc85$\x85\x88\x1c5\bC\xc9\xfe\xa8P\n\x85IG\xc0n\x19OY\x98\x8ey*\x93\x84G\x9c\xa5\xa5\x02\x84E\x02\nSd\x1a[\xc0DL\xc4.\x8d\x14\xe4Bb\xef\x84P!\x0e\xb8\x10\x04玛a \xa8\xc4wq&\x9d\xf5#\x99\xd9|\xb3*\x8b\x1a\xa4\x19:j\x8a&\xcfa\x97\f\x0f\x110\xcbͨ\xe4\xde\x1ed|04\x10b l\xef\xd4\v\xf0,O\x91\x94\xc8\xc6\x1ft\x8e\x11Ox\x04\x1a3&\f\x8f\xb4\xbf\xfaVr\xdeA\xec\xc8\xe0B\x19~OL\x0f\x11\x18Q\x99\xc75e\x85\xa6\xb0\x96\x1a\xc8By\x8b\x15\xf82\xe0\xfe\x8c\xc5y\xedhi\xaaǛ\x8e\x18\xddX\x95a\x9c\x92@\x00S!7\x8ax\xb8\xa0\xf7*\xffY*˨\x01\v\x04%\xab\x15\f\xd7I\xb8p\xae\x18O\r\x14\xd9\xf3\x8a4)\x0fmߥVh\xd0E\x9eKee1gѧv!\xe8\x83\xc4Х\xbb\xae\x18\xe8\xc4[&P\x18\x978\x15\x855e(\x8bc\xee\xf8\f\x03\x14\xa8\x98\xb1\b\xccPƺ\xc2F6\xad\xff\bQ\xf7\v#\x82\xc0\xebC8\xa7\x0e\x89\xc4e\xdfl<|.\xe0\xcdO?\xd9\xfa\xe4ܷRB\"%\x1c\x81\xef\xfb\xbf\xb9gd\x94\x89Q\xf9\x8d\x89\x91O\xe6\xde*\x99\xed&R\xee\x95\xcf}\xdfw\u007f\xf0\x04v\xa9ҥ\xed\xaa/w\x83b\u007f\xff\xe0W\xaa\xba\a\xf7\xaeN\xad\xfaC\x1d\xea\xc1\x13P\xffd\xb7l\x19\xacpd\xe7\x1a2\xb0\x10#\u05fbo\xa5\xf4\xa3\x94i]G\xe7\xccR\r\x87\xa2V\xeb\xb7\x1al\xa8p\xff\xfc\x04\xee\xf3\x91\x19J1F\xee̿\x95r\xd7\xf7I\xb7J\xbf:Ի{ӎ\xb6\x03x\x8c\x9f\x8aO\x1c\xfc\xe3\xeeś\xde\xc9y\xffCo\xef\xb0\x1a\xc1$\x02\xb5\xf6\xa5\x85\x1a\xf0_\x9e\x00\xfeNV\x98-\xe8\xc3#p\xd1\xccC\xff\xad\x94\xf7\xbe\xef?\x94\xc5L\x8cZ41Q\x9d\xdcI\xf9{\xa6\xf4\x90\xa54\xa6\x1a\x86\xf1 fZ\xac\xcc\xf1\xa4a\xecRd\x13s\xb63\x1bX[\xeb\u007f\x8e@\xf0t\x12\xbeZ\x1f6N\xb4n\xb2c\xabҥ\x9a\xc7!\x1cA\xdeL\xdc;\x9e\xa6TP\x1ea\x93\xdc\a\xe2\xd5\fEo\xd3\xd2η\x054A\xbd\xa2\xf5\xc3X-HIȫ\xf4\xc0y6\x10\xe3l\x15\xe9\xa8Z\xef<Z\x1f\x8e'<`\x89A7\x17\xd8e\xe7\xab\xf6\xab@\x94RQu\xe1VQXF3\xf0\x12)\xfd\x90)\x8b\xeeK{\xe4\xff\x1dxn<n\xf1\xe1\x16F\xd6x\xe0\xd9RK\x87@\xfcy\xf1\xe1,\x10GGGG\xce[\xf4}\xb2\x90u\xf3\x8b$ҁ\x93[\xb7N)t\xa9\x8f\n\aE\xcaT \x1e7\xa1\xe2\x18'\xa2\xd9\x02\xccB\x8c\xe3\x89|\xb6J\xf5\x15\x81\xa8i\\b\x01\xdf\xfc\x93 ߔKı\xc8\xd7]\xe0Wd>\xac\xa8J\xce&\xfeN\xd6Y\tO\xb1L܊\xdc稴\x14\x13θy\x0f\x12\xae\xb4\xb9\xb6\x1e:\x82\u05ff5J)\x0eU\xe1\xc1\x94\x12\x00LL\x05\x9eE\x1dx\x87\x10x\xb3x3\r\xccwP\x02\xaf51`a\x9c\xb1\xcc\x19)\xf6\xf7\u007f\x8e\x1c\x04\xfb7\xd6j\x12\xa4\xf9\x15k\x10O\x92rY1\xed}\xe7G\xae\xe1\x0e\xd3\xf4\x1f\x9f\x84\xbc\x13\x96\xb7C\xa6igQh#3p\xf4\x98\x0en\xcbM\x94\x8d\x88\xbb\xe4\xa9uC!\x15\x03`.\xa0\x81\xb8\xb1ԩ\":\x94i\xec\xc2Y\xeb\xc9njJ&@\xb9\xf3(\x89\x10\bkf\x1cs\xd8%\xfeWC\xf98o\xf3t\xf5\xf1j\xefp\x9d8M\x9b\x9b\n\x95\x1d\x8f\xb3\xf1\xda?x}\xa0\x03\xaf\xf4\xfa\xf4Vy\xeaJ\xce\x1a{el\x18x\xc6k\x9bx\uea8f\v\x83\x03T\vN\xcd~>\x98m\xb5\xf4\xfd*\x80b4\x8c\xa7_\xed\xa0\xa6~6\xf1\x8c\x13\x9a2N\x17F!\xcb֎\xd6@\xe5\xd1\xf5\xd7\xf1<\xed\x17\xae\xbf\xbb\xa0ZT\xb3o\x8fl 'v\xe8\xff\xc3ο\x03\x00\x00\xff\xff\xebī\x01]N\x00\x00",
		hash:  "c51f76c857feba7a7922f82925776cf324e8b6f25a4b87f2cec3ea279a272d9d",
		mime:  "application/json",
		mtime: time.Unix(1599411651, 0),
		size:  20061,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
