package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec\\\xefo\xdb6\xb7\xfe\x9e\xbf\xe2\\\xdd\v4\xb9\xf3\x95\xd3l؇\f\x01\xae\u05f8]\x864\t\x1c\xe7Ë*H(\xe9\xc8\xe6*\x91*I%\xf5\x8a\xfc\xef/\x0e)ٲb;\x8e\x9dvu_\x0f\x18\x1c\x8b\xe4\xe1\xc3s\x9e\xf3\xf0\x87\xe8~\xd9\x01\xf0\xf4=\x1b\fPy\x87\xe0\x1d\xf8\xfb^\x8b\x9eq\x91H\xef\x10\xa8\x1c\xc03ܤH\xe5o\x98\xe0\x1a:q\xc6\x05t.Nl]\x00\xef\x0e\x95\xe6RP\x8d}\u007f\xdf\u007f\xed\xed\x00<X;\x91\x14\xba\xc8P{\x87\xf0\xc1\xd5ey\x9e\xf2\x88\x19.E\xfb/-\x05ս\xb6us%\xe3\"Z\xb2.3C=\x01\xd8f\x03\x14f\xf2\x00\xc0\x1b\xa0\xa9}\x05\xf0d\x8eʚ:\x89\t\xa8\x1d\xc4\xcd)צCmˡؚ\nu.\x85F=e\x00\xc0;\xd8\xdfo<\x02\xf0bԑ\xe2\xb9)\x1d\xd0\x01]D\x11j\x9d\x14)T\x96\xfc\x9ay\xdbHGC\xcc\xd8#c\x00\xde\xff(L\xc8\xce\u007f\xb7cL\xb8\xe0dW\xb7Y\xce5\xaa;Tc\xc0\xbdҴ7e\xe0\xa1\xf6\xed\xa1ާ\x17c\u008a\xd4<\x8d_@!\xf0s\x8e\x91\xc1\x18P)\xa9\xc6\xc3Xw\x14\xaa\x10\x86g\xd8%\xa3\vp\xef\xcc\x18\x81\x973\xc524\xa8&\xfcp\xff5\x86#Xf\xa9\xaa\rS\xa6\t\x98\xdb!~*P\x8d\x9aE\n?\x15\\!q#a\xa9\xc6F\xb1\x19\xe5\xa5Y\xc5Š\xd98\x91*c\xe4[\x8f\v\xf3\xeb/\u07bc(\xcc\xc1\x9a\xb3\x01\xdeh\xfe7n\b^\xfb\xf9\xb5\xa0\xced\xc2u\x8d\t\x86\r\x9a\x1cp\xd9<iz\xbd\xd3\x18\x8c\x97K\xbd\x8c\x1e\xbcQ\xc8\fn\x94\"\xd4 o5a1oC\x19\x8ff\xf3vVI\x8d\xb6F\x15\xf8R\xf1r\xe4Zb\xa4\xabr~\xa7\xe6\xa6jfl\u007f\xb1\x9f>\x8f\x1f\xea\x93\xe4\x92Yq\x95Ǜ\x96\x155\xc8۬X\x9c\x15\x153fg\x06\xad\xb4\x9e\x97\x19\v\xf4\xbc\xb5\xcd\xd1's\xf4\x86\xc7\x0f\xedHa\x8c\xc2p\x96\xb6\xbf\xe0g\x83J\xb0\xd4\x16p\xad\v\\!\x85O\xa8ݛ\xb1\xd5MI\xe3\x06\xecm*/\x91\xca7\xdfK*\u05c8\xbbՖ\xfaz\xadJ\xc2\u007fP`\xb8\xb8\xe3\xc6\xed\xac\xa7\x04f\x05iy\x87nGz26\xb91\xea2F\xbc\x15\x96\xad\xb0|\xb5M\xe8\xec\\l$\xdbr\xe7UU\xaemJ\x86Ux\xb7\xf9\xb5\x98ћA\xe4\xf1iJ\x8c)\x1a\\\x82\xafǶ\xe2FQ\xb6\x06y\xcb\xda\x1f\x81\xb5\xd3\xf2\xfbȟ\xcfxSp\xe9\xdanЫ\x02\x87x\xcb\xe3\xed\xbb\x82\x1f\xfe]\xc1\x12X\xaa\xf7\x94?\xf0\xab\x8b͒\xa8:\xe6\xadHm\xc0\xe1EI\xafovpီ\xbeYڬt\x18\x03\xde\xe6\xc2\u007f\xf2vi\xb3H[Ǽ\xe5폺aj\u007fq\x9fk\xbdA\xde,b\xd71o\x89\xfd\xc4\x0e\xaa\"\xc7\xf6E\xcf7_+\x8d/[\xd6PL\xaeFڃ\xacK\xc3L1u=rΞ\xcfCQdS\xdd{\x97\xfdN\xaf\u007fr\xf6\xae\x9e\xb6\xbd\xab\xb3\xb3ƣn\xafwޫ?\xe8w{\xefO\xce:\xfd\xeeq\x85\xfc\xba6!V\xe911?\xa5:\x8d7\xf13\x80\xcb\xf0/\x8c&\x9bv/W$<\x867\xa4\x84$\xb7!-\xf3\xa8U\xe7\u007fI\xa4g\xb7cZ\xf3\x81\xc0\xf8Ʊ\xe6f\xb5\xdeQ\xc4Ri\x16\xa68\xb1\xa3\xe7\x19bJ\xb1iJ{\xdc`\xa6\x1fk\xcf2sF\x1d\x86n\xb2f\x01\xeb\xeb4\x9b\xad(E\x98\xf2\xe8&\x9e\xef\x91P\xca\x14\xd9\xf4\xee\xbcv\xfaP\x15\xef4A?,`N\xf7nM\xfa\x94\xf5\x97\xf0\xc0\x8c\x8e\xfb\xd4x\xa67\xce\xd3x\x15\xab\xb3\x8d\x9d\xe1\xfd\x9aƖ\xf5d\u007f\xda\x1b\xcfP\x91\xce\xf1q]\x1c\xae.\x8e;\xfdn\xfd\xc9q\xf7\xb4\xdb\xef.\x94\n\xb21\a\xa11\x8a\x87\x85\xc1uB\xbdjίB\x91\no\x83!O\xc4a\xaaՊb\xdek\xe8\xf6\xd9\xd5\xfb\u07fbS\xc2}\xfe\xfb\x9f\xdd7\xfd\xfa\x93N\xaf\xd7\xf9W\xfd\xc1\xef\xe7\xe7\xa7\xd3FNO\x9fP\xf9\xde|\x8d\x9fu\x83\xf5\xdb(\xfeb\u007f\xcf<\x9d\xfaN\x80UWHր\xb3\xd6\x14\x15\xc9,\x9b\x96ֵ\xf2e\xa9\xb9\xb5\xa2\xff\vL\x85K\xdfљ(\xcb\xec\xe9r\xd9@\xfd\xa3\nu\xc7\xd2\x02_\x88{\xb3^\x8f\xce\x1f\xd2\"\x1bK'\xd6l#\x8f\xae\x16\xac\xe1X6\x98\xc1\xe5\x17\x9dC\x1f\x1f\xed\xad\x9d\xb9\xcf\xc4\xdb\u070e<\x01x\xc6ݨu\xa4or7\xeceh8\xefb\xe8\x1a\x18'wno^L\xa9\x1f\xff\\k\x1d\x80\xb2xRq\xe7,\x9e\x1b\xaf\xee\xa6d\xb5\xf9ӹ\xaf#\xa9\x8f\xaeT?<Ǉ/\x97;_ǉ\xb33\xf2ŝ\xf8\xf8Hai/^>\xba\xf7\xf0}\xef\xa4'\xbf)\xfdf\v\x8cq\xa4WX\r\t\x83\x9fͷߢ\u007f\xc35\xd1z+\xa1K\xc4\xf8\xc2\x1e\x01\x1c\x9f\x1c\xaf<\xe7\xcf\xfaU\xcfj6V[|\xe4J\x1a\x19\x16IG\x8c\xd6=T\xb8)T\xfa\x1c\x19zt\xf6}\xd5;m+ԲP\x11\x02e\x19\x98!3P\b\xfe\xa9\xc0t\x04\xdcNf\tG\rf\x88@\xb6A&\xf6o\x8d\x8a\xb3\x94\xff\x8dq \xec\x90\"\x99BX$\t*\xc8Pk6@\x1f\xfaC\x84\x94i\x03\x1a\a\xb4ԯ\x1a_\xf5N_iș\x19BVh\x03\ns\x85\x1a\x85\t\x04\x15'E\x9a\x8e\xe0S\xc1R\xea;v\xc8ʦ\x16\xc3.\xd3\xc0E n\xc9D{ \xe5 E\xbfr\xac\u007f\\\xb8\x97\a\xb7{\x0e\x81m\xae\x87\xb2Hc\b\x11\xb8\x00\x06\x11\x13R\xf0\x88\xa5@\x19\x1b\x88]\xf4\a~\vRd1\x17\x03\b<?\xf0\x80k\x10\xd2\x00\x8b\"\xcc\r\xc6{~ \x02q\" W,2<\xc2\x16\x18d\x99\x86B\x17\x8c\x10\xe7\n#\x99\xe5<\xa5N\x8c\xb4xC.\x98\x1a\x01KS\v];\x0f\x9b!\x8e\x82\xf2\xd0\x1e\xb8\x01#\xa1\xd0\x16\x1a\xb5)\xa5\x80\x86\xdc\x11#\x1f\xfe\x90\xf7x\x87\xaaEX\xc9w\x1a\xee\x87<\x1a\xda&f\x88\x81\xb0S\a\xc2\xedИ\xfc\xb6\xe5>\xf5m\v\xa4\x02!\xc1\x95\xb6@\n\xa4q\x83\xb4\f\xb0\x885\x1a(r`\x16[ \x1c\xbb\x1dČ\xe5\xday\xdb\xf6hd\x15V\xa8\xa560\r\x89LSy\xaf\x0f\xc99\xff\v'ɤKr`\xae\xe4\x1d\x8f1\x1e\xa3\xa2\x87L\xeb\"\xc3ا\x06\x1d\x01\u007f\xf4\xfb\x17\xf0\xae\xdb\a)*z8^\x8c8\xa610\xf8\xd0\fq\u007f\x94\xe3\xf5\x87\xeb@\x00؍\ty\xae\xf4\xb4S`;\xf6\xf2_\x03\x00&\xdck\x11\xd7\xdf\xe4\x1f\x04\xd0\xc0\x14Rh\xe4=\xc64\u0088E\xc4X)?\x169(\xd4Ej4\x84Lc\\B\xa3\x0e\xafz\xa7\xd6\xfa\x90\xddY\xf7g\xb5\xb8\xc7.\xf0\xac\x02C\u007f\xdfI\x1e\x03\x13#j\xebL[Z*L\xa4\xc2VU\x93\f0\xc3C\x9er3\x02\x81\x18[\x9f\x87\b65\xd4\x1d%\x1a\x10\x8ch\xc8\xc4\x00m\xa9e\x94\x0f\xbbW\x1a\xa1\x9c\xech \x144\"\xbd\x8b\x1a\x13l`\x81\x87\n\xd9Gbwi\xc1ߣ\x90\x9dI\x83\x87`\x86\\CR\x88\xc8Q\x830\x94\xec\x8f\n\xa5P\x98t\x04\xec\x8e\xf1\x94\x85阧2Ix\xc4YZ*@X$\xa00E\xa6\xb1\x05L\xc4D\xec\xd2HA.$\xf6N\b\x15\xe2\x80\vAp\xee\xb9\x19\x06\x82J|\x17g\xd2Y?\x92\x99\xcd7\xab\xb2\xa8A\x9a\xa1\xa3\xa6h\xf2\x1cv\xc9\xf0\x10\x01\xb3܌J\xee\xedA\xc6\aC\x03!\x06\xc2\xf6N\xbd\x00\xcf\xf2\x14I\x89l\xfcA\xe7\x18\xf1\x84G\xa01c\xc2\xf0H\xfb\xab\xef~\xe7\x9d9\x8f\f.\x94\xe1\xf7\xc4\xf4\x10\x81\x11\x95y\\SVh\nk\xa9\x81,\x94wX\x81/\x03\xee\xcf\xd8O\xd4NѦz\xbc\xed\x88ѭU\x19\xc6)\t\x040\x15r\xa3\x88\x87\vz\xaf\U0009f972\x8c\x1a\xb0@P\xb2Z\xc1p\x9d\x84\v\xe7\x8a\xf1\xd4@\x91\xbd\xa8H\x93\xf2\xd0\xf6]j\x85\x06]\xe4\xb9TV\x16s\x16}l\x17\x82>H\f]\xba늁N\xbce\x02\x85q\x89SQXS\x86\xb28\xe6\x8e\xcf0@\x81\x8a\x19\x8b\xc0\fe\xac+ld\xd3\xfa\x8f\x10u?3\"\b\xbc>\x84\v\xea\x90H\\\xf6\xcd\xc6\xc3\xe7\x02\xde\xfc\xf4\x93\xadO\xce}+%$R\xc2\x11\xf8\xbe\xff\x9b{FF\x99\x18\x95ߘ\x18\xf9d\ueb52\xd9n\"\xe5^\xf9\xdc\xf7}\xf7\aO`\x97*]ٮ\xfar7(\xf6\xf7\x0f~\xa5\xaa{\xf0\xc5թU\u007f\xa8C=x\x02\xea\x9f\xec\x8e-\x83\x15\x8e\xec\\C\x06\x16b\xe4z\xf7\xad\x94~\x942\xad\xeb\xe8\x9cY\xaa\xe1P\xd4j\xfdV\x83\r\x15\ue7df\xc0}12C)\xc6ȝ\xf9\xb7R\xee\xfa>\xe9V\xe9W\x87zwo\xda\xd1v\x00\x8f\xf1S\xf1\x89\x83\u007fܽ|\xd3;\xb9\xe8\x9f\xf7\xf6\x0e\xab\x11L\"Pk_Z\xa8\x01\xff\xe5\t\xe0\xefd\x85ق><\x02\x17\xcd<\xf4\xdfJ\xf9\xc5\xf7\xfd\x87\xb2\x98\x89Q\x8b&&\xaa\x93;)\u007fϔ\x1e\xb2\x94\xc6T\xc30\x1e\xc4L\x8b\x959\x9e4\x8c]\x89lb\xcevf\x03kk\xfd\xd7\x11\b\x9eN\xc2W\xeb\xc3Ɖ\xd6MvlU\xbaT\xf38\x84#ț\x89{\xcfӔ\n\xca\xd3z\x92\xfb@\xbc\x9a\xa1\xe8mZ\xda\xf9\xb6\x80&\xa8W\xb4~\x18\xab\x05)\ty\x95\x1e8\xcf\x06b\x9c\xad\"\x1dU\xeb\x9dG\xeb\xc3\xf1\x84\a,1\xe8\xe6\x02\xbb\xec|\xd5~\x15\x88R*\xaa.\xdc*\n\xcbh\x06^\"\xa5\x1f2e\xd1}n\x8f\xfc\xbf\x03ύ\xc7->\xdc\xc2\xc8\x1a\x0f<[j\xe9\x10\x88?/\xcf\xcf\x02qttt\xe4\xbcE\xdf'\vY7\xbfH\"\x1d8\xb9u\xeb\x94B\x97\xfa\xa8pP\xa4L\x05\xe2q\x13*\x8eq\"\x9a-\xc0,\xc48\x9e\xc8g\xabT_\x11\x88\x9a\xc6%\x16\xf0\xed\xff\x13\xe4\xdbr\x898\x16\xf9\xba\v\xfc\x8ȧ\x15U\xc9\xd9\xc4\xdf\xc9:+\xe1)\x96\x89[\x91\xfb\x02\x95\x96b\xc2\x197\xefA\u009567\xd6CG\xf0\xfa\xb7F)š*<\x98R\x02\x80\x89\xa9\xc0\xb3\xa8\x03\xef\x10\x02o\x16o\xa6\x81\xf9\x0eJ\xe0\xb5&\x06,\x8c3\x969#\xc5\xfe\xfeϑ\x83`\xff\xc6ZM\x824\xbfb\r\xe2IR.+\xa6\xbd\xef\xfc\xc85\xdcc\x9a\xfe\xdfG!\xef\x85\xe5\xed\x90i\xdaY\x14\xda\xc8\f\x1c=\xa6\x83\xdbr\x13e#\xe2.yj\xddPH\xc5\x00\x98\vh n-u\xaa\x88\x0ee\x1a\xbbp\xd6z\xb2\x9b\x9a\x92\tP\xee<J\"\x04\u009a\x19\xc7\x1cv\x89\xff\xd5P>\xcc\xdb<]\u007f\xb8\xde;\\'N\xd3\xe6\xa6Be\xc7\xe3l\xbc\xf6\x0f^\x1f\xe8\xc0+\xbd>\xbdU\x9e\xba}\xb4\xc6^\x19\x1b\x06\x9eq&\x13\xcf]\xf5qap\x80j\xc1A\xdf\xcf\a\xb3\xad\x96\xbe_\x05P\x8c\x86\xf1\xf4\xab\x1d\xd4\xd4\xcf&\x9eqBS\xc6\xe9\xd2(d\xd9\xda\xd1\x1a\xa8<\xba\xf9:\x9e\xa7\xfd\xc2\xcdw\x17T\x8bj\xf6E\x99\r\xe4\xc4\x0e\xfd\xff\xb0\xf3\xef\x00\x00\x00\xff\xffJҍ3\x17P\x00\x00",
		hash:  "1ba6bd76284daab0cd648871a9205210238ab8e70e0d336cf8b70ac86593b864",
		mime:  "application/json",
		mtime: time.Unix(1601060386, 0),
		size:  20503,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
