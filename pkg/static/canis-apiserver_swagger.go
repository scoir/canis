package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec[oo\xdb8\xf2~\x9fO1?\xfd\x0ehr\xeb\x93\xd3\xecb_d\x11།\xdb\xcd\"M\x02\xc7yq\xa8\x82\x84\x92F6\xb7\x12\xa9\x92TRo\x91\xef~\x18R\xb2e\xc5v\x1c;ݭ{.P8\x16\xc9\xe1Ùg\x1e\xfe\x11\xfde\a\xc0\xd3\xf7l0@\xe5\x1d\x82w\xe0\xef{-z\xc6E\"\xbdC\xa0r\x00\xcfp\x93\"\x95\xbfa\x82k\xe8\xc4\x19\x17й8\xb1u\x01\xbc;T\x9aKA5\xf6\xfd}\xff\xb5\xb7\x03\xf0`\xedDR\xe8\"C\xed\x1d\xc2\aW\x97\xe5y\xca#f\xb8\x14\xed?\xb4\x14T\xf7\xda\xd6͕\x8c\x8bhɺ\xcc\f\xf5\x04`\x9b\rP\x98\xc9\x03\x00o\x80\xa6\xf6\x15\xc0\x939*k\xea$&\xa0v\x107\xa7\\\x9b\x0e\xb5-\x87bk*Թ\x14\x1a\xf5\x94\x01\x00\xef`\u007f\xbf\xf1\b\xc0\x8bQG\x8a\xe7\xa6t@\at\x11E\xa8uR\xa4PY\xf2k\xe6m#\x1d\r1c\x8f\x8c\x01x\xffP\x98\x90\x9d\xffoǘp\xc1ɮn\xb3\x9ckTw\xa8ƀ{\xa5io\xca\xc0C\xed\xdbC\xbdO/Ƅ\x15\xa9y\x1a\xbf\x80B\xe0\xe7\x1c#\x831\xa0RR\x8d\x87\xb1\xee(T!\fϰKF\x17\xe0ޙ1\x02/g\x8aehPM\xf8\xe1\xfe5\x86#Xf\xa9\xaa\rS\xa6\t\x98\xdb!~*P\x8d\x9aE\n?\x15\\!q#a\xa9\xc6F\xb1\x19\xe5\xa5Y\xc5Š\xd98\x91*c\xe4[\x8f\v\xf3\xf3O\u07bc(\xcc\xc1\x9a\xb3\x01\xdeh\xfe'n\b^\xfb\xf9\xb5\xa0\xced\xc2u\x8d\t\x86\r\x9a\x1cp\xd9<iz\xbd\xd3\x18\x8c\x97K\xbd\x8c\x1e\xbcQ\xc8\fn\x94\"\xd4 o5a1oC\x19\x8ff\xf3vVI\x8d\xb6F\x15\xf8R\xf1r\xe4Zb\xa4\xabr~\xa7\xe6\xa6jfl\u007f\xb1\x9f>\x8f\x1f\xea\x93\xe4\x92Yq\x95Ǜ\x96\x155\xc8۬X\x9c\x15\x153fg\x06\xad\xb4\x9e\x97\x19\v\xf4\xbc\xb5\xcd\xd1's\xf4\x86\xc7\x0f\xedHa\x8c\xc2p\x96\xb6\xbf\xe0g\x83J\xb0\xd4\x16p\xad\v\\!\x85O\xa8ݛ\xb1\xd5MI\xe3\x06\xecm*/\x91\xca7\xdfJ*\u05c8\xbbՖ\xfaz\xadJ¿Q`\xb8\xb8\xe3\xc6\xed\xac\xa7\x04f\x05iy\x87nGz26\xb91\xea2F\xbc\x15\x96\xad\xb0|\xb5M\xe8\xec\\l$\xdbr\xe7UU\xaemJ\x86Ux\xb7\xf9\xb5\x98ћA\xe4\xf1iJ\x8c)\x1a\\\x82\xafǶ\xe2FQ\xb6\x06y\xcb\xda\uf075\xd3\xf2\xfbȟ\xcfxSp\xe9\xdanЫ\x02\x87x\xcb\xe3\xed\xbb\x82\xef\xfe]\xc1\x12X\xaa\xf7\x94\xdf\xf1\xab\x8b͒\xa8:\xe6\xadHm\xc0\xe1EI\xaf\xbf\xec\xe0\xc2\x01]}\xb3\xb4Y\xe90\x06\xbcͅ\xff\xe5\xed\xd2f\x91\xb6\x8ey\xcb\xdb\xefu\xc3\xd4\xfe\xe2>\xd7z\x83\xbcYĮc\xde\x12\xfb\x89\x1dTE\x8e틞\xbf|\xad4\xbelYC1\xb9\x1ai\x0f\xb2.\r3\xc5\xd4\xf5\xc89{>\x0fE\x91Mu\xef]\xf6;\xbd\xfe\xc9ٻz\xda\xf6\xae\xce\xce\x1a\x8f\xba\xbd\xdey\xaf\xfe\xa0\xdf\xed\xbd?9\xeb\xf4\xbb\xc7\x15\xf2\xebڄX\xa5\xc7\xc4\xfc\x94\xea4\xde\xc4\xcf\x00.\xc3?0\x9alڽ\\\x91\xf0\x18ސ\x12\x92܆\xb4̣V\x9d\xff%\x91\x9eݎi\xcd\a\x02\xe3\x1bǚ\x9b\xd5zG\x11K\xa5Y\x98\xe2Ď\x9eg\x88)Ŧ)\xedq\x83\x99~\xac=\xcb\xcc\x19u\x18\xbaɚ\x05\xac\xaf\xd3l\xb6\xa2\x14aʣ\x9bx\xbeGB)Sdӻ\xf3\xda\xe9CU\xbc\xd3\x04\xfd\xb0\x809ݻ5\xe9S\xd6_\xc2\x033:\xeeS\xe3\x99\xde8O\xe3U\xac\xce6v\x86\xf7k\x1a[֓\xfdio<CE:\xc7\xc7uq\xb8\xba8\xee\xf4\xbb\xf5'\xc7\xdd\xd3n\xbf\xbbP*\xc8\xc6\x1c\x84\xc6(\x1e\x16\x06\xd7\t\xf5\xaa9\xbf\nE*\xbc\r\x86<\x11\x87\xa9V+\x8ay\xaf\xa1\xdbgW\xef\u007f\xedN\t\xf7\xf9\xaf\xbfw\xdf\xf4\xebO:\xbd^\xe7?\xf5\a\xbf\x9e\x9f\x9fN\x1b9=}B\xe5{\xf35~\xd6\rֿF\xf1\x17\xfb{\xe6\xe9\xd47\x02\xac\xbaB\xb2\x06\x9c\xb5\xa6\xa8Hfٴ\xb4\xae\x95/Kͭ\x15\xfd_`*\\\xfa\x8e\xceDYfO\x97\xcb\x06\xeaoU\xa8;\x96\x16\xf8Bܛ\xf5zt\xfe\x90\x16\xd9X:\xb1f\x1byt\xb5`\rǲ\xc1\f.\xbf\xe8\x1c\xfa\xf8ho\xed\xcc}&\xde\xe6v\xe4\t\xc03\xeeF\xad#}\x93\xbba/C\xc3y\x17C\xd7\xc08\xb9s{\xf3bJ\xfd\xf8\xe7Z\xeb\x00\x94œ\x8a;g\xf1\xdcxu7%\xab͟\xce}\x1dI}t\xa5\xfa\xe19>|\xb9\xdc\xf9:N\x9c\x9d\x91/\xee\xc4\xc7G\nK{\xf1\xf2ѽ\x87o{'=\xf9M\xe9\xf7\xb8\xc0XoYq\x89\x18_\xd8\xfd\xf4\xf1\xc9\xf1\xca\x13謟Ȭfc\xb5\x99<W\xd2ȰH:b\xb4\xee\x0e\xfd\xa6P\xe9sr\xfa\xd1A\xf2UﴭP\xcbBE\bDY0Cf\xa0\x10\xfcS\x81\xe9\b\xb8\x9d\x19\x12\x8e\x1a\xcc\x10\x81l\x83L\xec\xdf\x1a\x15g)\xff\x13\xe3@\xd8!E2\x85\xb0H\x12T\x90\xa1\xd6l\x80>\xf4\x87\b)\xd3\x064\x0eh\xdd\\5\xbeꝾҐ33\x84\xac\xd0\x06\x14\xe6\n5\n\x13\b*N\x8a4\x1d\xc1\xa7\x82\xa5\xd4w쐕M-\x86]\xa6\x81\x8b@ܒ\x89\xf6@\xcaA\x8a~\xe5X\xff\xb8p'\xf1\xb7{\x0e\x81m\xae\x87\xb2Hc\b\x11\xb8\x00\x06\x11\x13R\xf0\x88\xa5@B\x17\x88]\xf4\a~\vRd1\x17\x03\b<?\xf0\x80k\x10\xd2\x00\x8b\"\xcc\r\xc6{~ \x02q\" W,2<\xc2\x16\x18d\x99\x86B\x17\x8c\x10\xe7\n#\x99\xe5<\xa5N\x8c\xb4xC.\x98\x1a\x01KS\v];\x0f\x9b!\x8e\x82\xf2\x04\x1c\xb8\x01#\xa1\xd0\x16\x1a\xb5\x89\xa40\xf8\xd9z\xab#F>\xfc&\xef\xf1\x0eU\x8b\xb0\x92\xef4\xdc\x0fy4\xb4M\xcc\x10\x03au\x18\xe1vhL~\xdbr\x9f\xfa\xb6\x05R\x81\x90\xe0J[ \x05ҸAZ\x06X\xc4\x1a\r\x1490\x8b-\x10\x8e\xdd\x0eb\xc6r\xed\xbcm{4\xb2\n+\xd4R\x1b\x98\x86D\xa6\xa9\xbcׇ\xe4\x9c\u007f\xc2I2\xe9\x92\x1c\x98+y\xc7c\x8cǨ\xe8!Ӻ\xc80\xf6\xa9AG\xc0o\xfd\xfe\x05\xbc\xeb\xf6A\x8a\x8a\x1e\x8e\x17#\x8ei\f\f>4C\xdc\x1f\xe5x\xfd\xe1:\x10\x00v\x95O\x9e+=\xed&.;\xf6\xf2\xa7\xf5\xc0\x84{\xc7\xe0\xfa\x9b\xfc\xba^\x03SH\xa1\x91\xf7\x18\xd3\b#\x16\x11c\xa5\xfcX\xe4\xa0P\x17\xa9\xd1\x102\x8dq\t\x8d:\xbc\xea\x9dZ\xebCvgݟ\xd5\xe2\x1e\xbb\xc0\xb3\n\f\xfd}'y\fL\x8c\xa8\xad3mi\xa90\x91\n[UM2\xc0\f\x0fy\xca\xcd\b\x04bl}\x1e\"\xd8\xd4Pw\x94h@0\xa2!\x13\x03\xb4\xa5\x96Q>\xec^i\x84r栁PЈ\xf4.jL\xb0\x81\x05\x1e*d\x1f\x89ݥ\x05\u007f\x8fBv&\r\x1e\x82\x19r\rI!\"G\r\xc2P\xb2?*\x94Ba\xd2\x11\xb0;\xc6S\x16\xa6c\x9e\xca$\xe1\x11gi\xa9\x00a\x91\x80\xc2\x14\x99\xc6\x160\x11\x13\xb1K#\x05\xb9\x90\xd8;!T\x88\x03.\x04\xc1\xb9\xe7f\x18\b*\xf1]\x9cIg\xfdHf6߬ʢ\x06i\x86\x8e\x9a\xa2\xc9s\xd8%\xc3C\x04\xccr3*\xb9\xb7\a\x19\x1f\f\r\x84\x18\b\xdb;\xf5\x02<\xcbS$%\xb2\xf1\a\x9dc\xc4\x13\x1e\x81ƌ\t\xc3#\xed\xaf\xbe\x95\x9cw\x80;2\xb8P\x86\xdf\x13\xd3C\x04FT\xe6qMY\xa1)\xac\xa5\x06\xb2P\xdea\x05\xbe\f\xb8?cq^;\x92\x9a\xea\xf1\xb6#F\xb7Ve\x18\xa7$\x10\xc0Tȍ\"\x1e.\xe8\xbd\xca\u007f\x96\xca2j\xc0\x02A\xc9j\x05\xc3u\x12.\x9c+\xc6S\x03E\xf6\xa2\"M\xcaC\xdbw\xa9\x15\x1at\x91\xe7RYY\xccY\xf4\xb1]\b\xfa 1t\xe9\xae+\x06:\xf1\x96\t\x14\xc6%NEaM\x19\xca\xe2\x98;>\xc3\x00\x05*f,\x023\x94\xb1\xae\xb0\x91M\xeb?B\xd4\xfd̈ \xf0\xfa\x10.\xa8C\"q\xd97\x1b\x0f\x9f\vx\xf3\xc3\x0f\xb6>9\xf7\xad\x94\x90H\tG\xe0\xfb\xfe/\xee\x19\x19ebT~cb䓹\xb7Jf\xbb\x89\x94{\xe5s\xdf\xf7\xdd\x1f<\x81]\xaate\xbb\xea\xcbݠ\xd8\xdf?\xf8\x99\xaa\xee\xc1\x17W\xa7V\xfd\xa1\x0e\xf5\xe0\t\xa8\xbf\xb3;\xb6\fV8\xb2s\r\x19X\x88\x91\xebݷR\xfaQʴ\xae\xa3sf\xa9\x86CQ\xab\xf5K\r6T\xb8\u007f|\x02\xf7\xc5\xc8\f\xa5\x18#w\xe6\xdfJ\xb9\xeb\xfb\xa4[\xa5_\x1d\xeaݽiG\xdb\x01<\xc6O\xc5'\x0e\xfeq\xf7\xf2M\xef\xe4\xa2\u007f\xde\xdb;\xacF0\x89@\xad}i\xa1\x06\xfc\xa7'\x80\xbf\x93\x15f\v\xfa\xf0\b\\4\xf3\xd0\u007f+\xe5\x17\xdf\xf7\x1f\xcab&F-\x9a\x98\xa8N\xee\xa4\xfc=Sz\xc8R\x1aS\r\xc3x\x103-V\xe6x\xd20v%\xb2\x899ۙ\r\xac\xad\xf5\u007fG x:\t_\xad\x0f\x1b'Z7ٱU\xe9R\xcd\xe3\x10\x8e o&\xee=OS*(\x8f\xbeI\xee\x03\xf1j\x86\xa2\xb7ii\xe7\xdb\x02\x9a\xa0^\xd1\xfaa\xac\x16\xa4$\xe4Uz\xe0<\x1b\x88q\xb6\x8atT\xadw\x1e\xad\x0f\xc7\x13\x1e\xb0Ġ\x9b\v\xec\xb2\xf3U\xfbU J\xa9\xa8\xbap\xab(,\xa3\x19x\x89\x94~ȔE\xf7\xb9=\xf2\xff\f<7\x1e\xb7\xf8p\v#k<\xf0l\xa9\xa5C ~\xbf<?\v\xc4\xd1\xd1ё\xf3\x16}\x9f,d\xdd\xfc\"\x89t\xe0\xe4֭S\n]\xea\xa3\xc2A\x912\x15\x88\xc7M\xa88Ɖh\xb6\x00\xb3\x10\xe3x\"\x9f\xadR}E j\x1a\x97X\xc0\xb7\xff&ȷ\xe5\x12q,\xf2u\x17\xf8\x15\x99\x0f+\xaa\x92\xb3\x89\xbf\x93uV\xc2S,\x13\xb7\"\xf7\x05*-ń3nރ\x84+mn\xac\x87\x8e\xe0\xf5/\x8dR\x8aCUx0\xa5\x04\x00\x13S\x81gQ\a\xde!\x04\xde,\xdeL\x03\xf3\x1d\x94\xc0kM\fX\x18g,sF\x8a\xfd\xfd\x1f#\a\xc1\xfe\x8d\xb5\x9a\x04i~\xc5\x1aē\xa4\\VL{\xdf\xf9\x91k\xb8\xc74\xfd\xd7G!\xef\x85\xe5\xed\x90i\xdaY\x14\xda\xc8\f\x1c=\xa6\x83\xdbr\x13e#\xe2.yj\xddPH\xc5\x00\x98\vh n-u\xaa\x88\x0ee\x1a\xbbp\xd6z\xb2\x9b\x9a\x92\tP\xee<J\"\x04\u009a\x19\xc7\x1cv\x89\xff\xd5P>\xcc\xdb<]\u007f\xb8\xde;\\'N\xd3\xe6\xa6Be\xc7\xe3l\xbc\xf6\x0f^\x1f\xe8\xc0+\xbd>\xbdU\x9e\xbaʳ\xc6^\x19\x1b\x06\x9e\xf1\xba'\x9e\xbb\xea\xe3\xc2\xe0\x00ՂS\xb3\x1f\x0ff[-}\xbf\n\xa0\x18\r\xe3\xe9W;\xa8\xa9\x9fM<ㄦ\x8cӥQȲ\xb5\xa35Pyt\xf3u<O\xfb\x85\x9bo.\xa8\x16\xd5\xec['\x1bȉ\x1d\xfa\xff\xb0\xf3\xdf\x00\x00\x00\xff\xff\xaax:VdO\x00\x00",
		hash:  "39f8aa32907a7f6d4d9230e290ddda42ce4e980acfd6d9c58309f18c74ed348c",
		mime:  "application/json",
		mtime: time.Unix(1599743018, 0),
		size:  20324,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
