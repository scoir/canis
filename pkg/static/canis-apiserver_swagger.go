package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec\\}o۶\xf6\xfe\xbf\x9f\xe2\xfc\xf4\xbb@\x93;ON\xb3a\u007fd\bp\xb36\xed2\xa4i\xe0&\x18.\xaa\xc0\xa1\xa4#\x9b+E\xaa$\x95\xd4+\xf2\xdd/HJ\u058b\xed\xf8-I\xeb\xce\x05\n\xc7\"u\xf8\xf0\x9c\xe7<|\x93\xfc\xe5\x19\x80\xa7n\xc9`\x80\xd2;\x00o\xdf\xdf\xf3:\xe6\x1a\xe5\x89\xf0\x0e\xc0\x94\x03x\x9aj\x86\xa6\xfc%\xe1T\xc1Q\x9cR\x0eG\xe7'\xb6.\x80w\x83RQ\xc1M\x8d=\u007f\xcf\xdf\xf7\x9e\x01\xdcY;\x91\xe0*OQy\a\xf0\xc1\xd5%Y\xc6hD4\x15\xbc\xfb\x97\x12\xdcԽ\xb2u3)\xe2<Z\xb0.\xd1CU\x01\xec\x92\x01r]]\x00\xf0\x06\xa8k_\x01<\x91\xa1\xb4\xa6Nb\x03\xd4v\xa2\u007fJ\x95>2\xf7\x16]\xb15%\xaaLp\x85\xaaa\x00\xc0\xdb\xdf\xdbk]\x02\xf0bT\x91\xa4\x99.\x1cp\x04*\x8f\"T*\xc9\x19\x94\x96\xfc\x9ay{\x93\x8a\x86\x98\x92\tc\x00\u07bf$&\xc6\xce\xffwcL(\xa7Ʈꒌ*\x947(ǀ{\x85i\xafa\xe0\xae\xf6\xed\xaeަ\x17cBr\xa6\xe7\xe3\xe7\x90s\xfc\x9ca\xa41\x06\x94Rȇ\xeb\x86̹\xa6)\x1e\x1b\xab\xf7\x00\u007f6\xa5\v^F$IQ\xa3\xac\b\xe2\xfe\xb5\xfa\xc3Ij\xb9\xaa4\x91\xba\r\x98\xda>~\xcaQ\x8e\xdaE\x12?\xe5T\xa2!GB\x98\xc2V\xb1\x1ee\x85YI\xf9\xa0}s\"dJ\x8cs=\xca\xf5/?{\xb3\xc20\x03kF\x06\xd8W\xf4o\xdc\x10\xbc\xf6\xf3\xb1\xa0Ne\xc2U\x8d\t\x9a\f\xda\x1cp\xe9\\\xddz\xf5\xac\xd5\x19/\x13j\x11Ax)\x91h\xdc(I\xa8Aފ\xc2\x1c\xe2\x86\"\x1eM'\ued12\x1ao\xb5\xcc\xf1\xa1\x02\xe6ص@OW%\xfd\xb3\x9a\x9bʱ\xb1\xfb\xc5~\xfa4\xbe\xab\x0f\x93\v\xa6\xc5e\x16oZZ\xd4 o\xd3bNZ\x94Ԙ\x9e\x1af\xb2\xb5\\jܣ\xe8\x9dm\x92\xceM\xd2>\x8dﺑ\xc4\x18\xb9\xa6\x84u\xbf\xe0g\x8d\x92\x13f\v\xa8R9\xae\x90\xc3'澗c\xab\x9b\x92\xc7-\xd8\xdb\\^$\x97\xfb\xdfJ.ט\xbb\x15\x97\xfa\x94\xad\xcc¯\xa80\x94\xdfP\xedV\xd7\r\x85Y~\x19\xfd\x06ݢ\xf4dlqc\xd4e\x8cx+,[ay\xbcu\xe8\xbc\\\xcc$*\xe4Ӳ\xb1k@cc\x84_t\xc4\xef\xb9;\xcfk\xb67%/\xa7@\xdf&\xe86A7~䟖\x92O>\x05Xk\x8c\xdf\x14\x05)\xf1necN^l\xc6\x00:\xdeȍ\x91\xa1\xc6\x05\b\xfb\xcaV\xdc(\xce\xd6 oi\xfb]ж)\xc0\x13\xfe\\\xe2\x98\xf2\xbd\xbbw\x83\xce)\x1d\xe2-\x91\xb7\a\x95\xdf\xffA\xe5\x02Xʧ$\xbe\xe3s\xd3\xcdҨ:\xe6\xadJm\xc2\xea\xa9\xe0ד-\x98\x1c\xd0\xd5\x17L\x9b\x95\x0fc\xc0\xdbd\xf8G/\x996\x8b\xb5u\xcc[\xe2~\xb7\x8b\xa6\xee\x17\xf7\xb9\xd6\x03,\x9b\xc5\xec:\xe6-\xb3筢Jvl7\x9b\xbf\xdat\xe9\x16á\x10\x1fW\xdda>\xa5J\xff\xe9Ll\xd26G\x01y\x9b\xa1\xff\xe8Iӆ\x11\xb7\x01zK\xdd\uf2faK\xed\xd9l\x18q\x1b\xa0\xb7\xc4\xfd\x16\x88\xbbAO\xddթ㞪y\xf4\xc9\xd1\xf8]\xb8\x1a\xa6\xea\xcd5{\xd6\xf7^\x13\x9d7\xde^\x9b\xb1)\xee!\xcf\xd3F\xf3\xde\xfb\x8b\xa3\xde\xc5\xc9ٛz\xfe\xf6.\xcf\xceZ\x97\x8e{\xbdw\xbd\xfa\x85\x8b\xe3\xdeۓ\xb3\xa3\x8b\xe3W%\xf2\xab\xda\xd0W\xa6Ie\xbe1\xd3k=%=\x05\xb8\b\xff¨:\xd5\xf02i$HӖ\xa6\x18\x82\xb64f\x16\xd1\xeaiP\xd0j\xe9\xfb\x88Rt\xc01\xee;\x0e\xf5Wk\x1dy,\xa4\"!\xc3ʎ\x9ae\x88HI\x9a\x04\xf7\xa8\xc6TMj\xd0\"CC\x1d\x86j\xb3\xe6\x9e\x1c\xa8\xd3l\xba\xb0\xe4!\xa3Q?\x9e\xed\x91P\b\x86\xa4\xc6\U000fba4b\x80\x8a\x1aZ˓\xfak\xa4+\xb0c\xd58K4\xa5Q3ז\xe1\x97\xe0}\x897\xe2#\xce#H#\xb0\xd5a\x95Y\xb8\xffhT~)w\xd10o\xcc8\x9f\xcc_E\x9d\x05\x884\x89\xf7\xc2ܻt//\x9a-.%x\xbd\x96\xb6\x9d]\xbe\xfd\xed\xb8!n\xef~\xfb\xe3\xf8\xe5E\xfd\xcaQ\xafw\xf4\xdf\xfa\x85\xdf\u07bd;m\x1a9=\x9d\xa3\x84\xbd\xd9:8\xed\x1d\xbc\xa7Q\xc5\xfb\xfd=\xf5\x88\xeb\xdb\x01\xd6\x1a\x8b\x9f|\x1c)6,\xd6\xd7\xee9\xc9Rα\xa7k\xfaR\x9e\x9a\x1bÙV\xca7\x0e\xd6\xf0\xf2Z\xc3f$Ҵ9[XK\x9f\x16\x1a\xefK\xb9Q\x8f\x1e\xe2\xca\xc1\x95\x92\xaf\x18\xee\t;_aD\xb8!,\xc7\a\xca\xf5iO\xb5-\xcbߩ\xa7<\xab\x19Y7\x95&\x1e,]#<d0%#\x96{3q\x8e\xf3'\x0fu\xd7\xce\xff%\xf1\xb6w\xa1\xe7\x00\x9e\xf2F\xce:\xe3B\xf5F\xd2Ðy\xd6\xeb\x88k`\xac\xde\xf4\xec?\xd8\xf8:\xf9;!\xeb\x00\x14\xf9\\ݞ1\x11n=\xb5\xd5\x10\xe7\xf6o\xb6<\x8e0O\xbc\xc8{\xb7\x8c\x0f\x1f.w\x1eǉ\xd33\xf2\xc1\x9d8y\x92\xb4\x94\x17\x17\x97ܹn\xb4\aL\xdf\xf4\x84\xed\\bL#\xa2\xf1k\xad~\xb3\xfe\xaa\U000e5b3fܸ\xbf\xd9K\xeei\xef\xe2\xfc\x83&Ƿ\x94\xb1~$xBe\xba\xf8\xa6O#\xe4\xd6\u007f\x18\xf7\xe7ϳ[Nt\x81\x88c\x9bw\x84\x9dOw\xe9\xa2\xfb\x106\xd1\xe6\xee\x97Up\xb32C\x9f\x1enS\x1cV\x91\x97\xfbތ\\\x83\xbd\x85w\xfa\xf5\x17Q\x1fn:\xf2~\xe2Ňo{\xa3\xb8\xfaE\xbb'KǱ\x92\xad\xa0\x1d\\\xe3g\xfd\xf4;\xd0O\xb8\xbc^oQ\xfd\x1e1>\xb7;ܯN^\xad\xbc\xf0\x9b\xf6\x8bB\xab\xd9Xs\x1d\xfb\xe7Ķ\xd5\xd2\xe9\x94K\xb6^jgRh\x11\xe6\xc9\x11\x1f\xad\x83\xc3\xd4\xef\xcf\a\xd3:\xc5m\x1d8_\xf6N\xbb\x12\x95\xc8e\x84`R\x1e\xf4\x90h\xc89\xfd\x94#\x1b\x01\xb5˫\x84\xa2\x02=D0\xb6A$\xf6o\x85\x92\x12F\xff\xc68\xe0\xb6K\x91`\x10\xe6I\x82\x12RT\x8a\fЇ\x8b!\x02#J\x83\u0081\x19\xa5˛/{\xa7\xcf\x15dD\x0f!͕\x06\x89\x85z\x06\xdc\x14'9c#\xf8\x94\x13fڎ\x1d\xb2\xe2V\x8ba\x87(\xa0<\xe0\xd7\xc6Dw Ā\xa1_:\xd6\u007f\x95\xbb#\xfb\xeb]\x87\xc0ޮ\x86\"g1\x84\b\x94\x03\x81\x88p\xc1iD\x18\x18\xf9\b\xf8\x0e\xfa\x03\xbf\x03\fIL\xf9\x00\x02\xcf\x0f<\xa0\n\xb8\xd0@\xa2\b3\x8d\xf1\xae\x1f\xf0\x80\x9fp\xc8$\x894\x8d\xb0\x03\x1aI\xaa W91\x883\x89\x91H3\xcaL#ZX\xbc!\xe5D\x8e\x800f\xa1+\xe7a=\xc4QP\x1c\x94\x03ՠ\x05\xe4\xcaB3\xf7\x14\xbad\xba|\xc4G>\xfc.n\xf1\x06e\xc7`5\xbeSp;\xa4\xd1\xd0ޢ\x87\x18p;\x83B\xb8\x1ej\x9d]wܧ\xba\ue010\xc0\x05\xb8\xd2\x0e\b\x8e\xa6\xdf 27\x1a\xb3\x11(Ԑg@,\xb6\x80\xbb,q\x10S\x92)\xe7mۢ\x16eX\xa1\xa63@\x14$\x821q\xab\x0e\x8cs\xfe\r'Iդq`&\xc5\r\x8d1\x1e\xa32\x17\x89Ry\x8a\xb1on8\xe2\xf0\xfb\xc5\xc59\xbc9\xbe\x00\xc1Kz8^\x8c(\xb2\x18\b|h\x87\xf8b\x94\xe1Շ\xab\x80\x03؉\xb7\xf1\\\xe1i7\x1cؾ\x17?\x8c\n\x84\xbbG\x11\\{\xd5o\xa3* \x12Mh\xc4-Ʀ\x87\x11\x89\fc\x85\xf8\x98g Q\xe5L+\b\x89¸\x80f\x1a\xbc\xec\x9dZ\xebCrcݟ\xd6\xe2\x1e\xbb\xc0\x93\x12\x8c\xf9\xfbF\xd0\x18\b\x1f\x99{\x9diKK\x89\x89\x90\xd8)k\x1a\x03DӐ2\xaaG\xc0\x11c\xeb\xf3\x10\xc1\xa6\x86\xbc1\x89\x06\x06F4$|\x80\xb6\xd42ʇ\x9dK\x85P\x8c\xbc\xa6#&h\x86\xf4.j\x84\x93\x81\x05\x1eJ$\x1f\r\xbb\v\v\xfe\xae\tٙ\xd0x\x00zH\x15$9\x8f\x1c5\f\x86\x82\xfdQ.%r\xcdF@n\be$dc\x9e\x8a$\xa1\x11%\xacP\x800O@\"C\xa2\xb0\x03\x84ǆ\u0605\x91ܸа\xb7\"T\x88\x03ʹ\x81sK\xf50\xe0\xa6\xc4wq6z\xedG\"\xb5\xf9f%\x1f\x15\b=t\xd4\xe4m\x9eÎ1<D\xc04ӣ\x82{\xbb\x90\xd2\xc1PC\x88\x01\xb7\xad\x9bV\x80\xa6\x19ô\x9c\xa6\x81\xca0\xa2\t\x8d@aJ\xb8\xa6\x91\xf2W\xdf՝\xb1\xbc\nG\x1a\xef\x95᷆\xe9!\x021T\xa6qMY\xa1-\xac\x85\x06\x92P\xdc`\t\xbe\b\xb8?eܩ\x9d\xc65Z\xbc>\xe2\xa3k\xab2\x84\x9a$\xe0@dH\xb54<\xbc\xa7\xf52\xff\t\x13EԀ\x04\xdc$\xab\x15\f\xd7Hx\xefX1\x1e\x1aLd\xcfK\xd20\x1aڶ\v\xadP\xa0\xf2,\x13\xd2\xcabF\xa2\x8fݜ\x9b\x0f#\x86.\xddU\xc9@'\xde\"\x81\\\xbb\xc4))\xacL\x86V\v\x0f\x18 GI\xb4E\xa0\x87\"V%6c\xd3\xfa\xcf :\xfeL\fA\xe0\xc5\x01\x9c\x9b\x06\r\x89\x8b\xb6ɸ\xfb\x94\xc3\xcb\x1f~\xb0\xf5\x8ds_\v\x01\x89\x10p\b\xbe\xef\xff\xea\xae\x19\xa3\x84\x8f\x8ao\x84\x8f|c\xee\xb5\x14\xe9N\"\xc4nq\xdd\xf7}\xf7\aM`\xc7T\xba\xb4M]\x88\x9d \xdf\xdb\xdb\xff\xc5T݅/\xaeN\xad\xfa]\x1d\xea\xfe\x1c\xa8\u007f\x90\x1b\xb2\bV8\xb4c\x8d1p/F\xaav^\v\xe1G\x8c(UG\xe7̚\x1a\x0eE\xad֯5\xd8P\xe2\xfei\x0e\xee\xf3\x91\x1e\n>F\xee̿\x16b\xc7\xf7\x8dn\x15~u\xa8wv\x9b\x8e\xb6\x1d\x98\xc4o\x8aO\x1c\xfcW\xc7\xef_\xf6N\xce/\xde\xf5v\x0f\xca\x1eT\x11\xa8\xdd_X\xa8\x01\xffy\x0e\xf07\xa2\xc4lA\x1f\x1c\x82\x8bf\x16\xfa\xaf\x85\xf8\xe2\xfb\xfe]QL\xf8\xa8c\x06&S'sR\xfe\x96H5$\xcc\xf4\xa9\x86a܉\xa9\x16Ks4i\x19\xbb\xe4ie\xce6f\x03kk\xfd\xdf!pʪ\xf0\xd5ڰq2\xf3&۷2]\xcaq\x1c\xc2\x11d\xedĽ\xa5\x8c\x99\x82\xe2\xd4\xdf\xc8}\xc0\x9fOQ\xf4\xae\x99\xda\xf9\xb6\xc0\fP\xcf\xcd\xfca\xac\x16FI\x8cW\xcd\x05\xe7ـ\x8f\xb3\x95\xb3Q9ߙ\x98\x1f\x8e\a< \x89F7\x16\xd8i\xe7\xf3\xee\xf3\x80\x17RQ6\xe1fQXD3\xf0\x12!\xfc\x90H\x8b\xeesw\xe4\xff\x1dx\xae?n\xf2\xe1&F\xd6x\xe0\xd9RK\x87\x80\xff\xf1\xfe\xddY\xc0\x0f\x0f\x0f\x0f\x9d\xb7\xcc\xf7j\"\xeb\xc6\x17aH\aNn\xdd<%W\x85>J\x1c\xe4\x8cȀO\xdeb\x8ac\xacD\xb3\x03\x98\x86\x18Ǖ|v\n\xf5\xe5\x01\xafi\\b\x01_\xff\xc7@\xbe.\xa6\x88c\x91\xaf\xbb\xc0/\xc9|PR\xd58\xdb\xf0\xb7\x9ag%\x94a\x91\xb8%\xb9\xcfQ*\xc1+θq\x0f\x12*\x95\xee[\x0f\x1d\u008b_[\xa5&\x0ee\xe1~C\t\x00*S\x81gQ\a\xde\x01\x04\xde4\xde4\x81\xf9\x0eJ\xe0u*\x03\x16\xc6\x19I\x9d\x91|o\xef\xa7\xc8A\xb0\u007fc\xad\xa6\x814\xbbb\r\xe2IRL+\x9a\xdew~\xa4\nn\x91\xb1\x1f?rq\xcb-o\x87D\x99\x95E\xae\xb4H\xc1ѣ\x19\u070e\x1b([\x11w\xc9SkƄ\x94\x0f\x80\xb8\x80\x06\xfc\xdaR\xa7\x8c\xe8P\xb0\u0605\xb3֒]\xd4\x14L\x80b\xe5Q\x10!\xe0\xd6\xcc8\xe6\xb0c\xf8_v\xe5ì\xc5\xd3Շ\xab݃u\xe2\xd44\xd7\b\x95폳\xf1\xc2\xdf\u007f\xb1\xaf\x02\xaf\xf0zs\xdd\xdex\xe0w\x8d\xb52\xb6\f,\xb1A\x14Ϝ\xf5Q\xaeq\x80\U0009e8e7\x9f\xf6\xa7[-|\xbf\n\xa0\x185\xa1\xec\xd1v\x8d\xea{\x13\x8bl\x17=3\xff\xef\x9e\xfd/\x00\x00\xff\xff\xbd\xb0'\xc4\x0ec\x00\x00",
		hash:  "1c7df855ae90894beab9f6aff3dce75ac47e7fa46544f87bd830ba077a2bbab9",
		mime:  "application/json",
		mtime: time.Unix(1603218336, 0),
		size:  25358,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
