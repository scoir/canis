package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec[oo\xdb8\xf2~\x9fO1?\xfd\x0ehr\xebS\xd2\xecb_d\x11།\xdbM\x91&\x81\xe3\xbc8TABI#\x9b[\x8aTI*\xa9[\xe4\xbb\x1f\x86\x94lY\xfe\x13'i\x8b\xa6\x97\x05\x16\x8eEr\xf8p晇CZ\xfd\xb2\x01\x10\x98\x1b6\x1c\xa2\x0e\xf6 \xd8\rw\x82\x0e=\xe32S\xc1\x1eP;@`\xb9\x15H\xed\xaf\x98\xe4\x06\xbai\xce%tO\x0f]_\x80\xe0\x1a\xb5\xe1JR\x8f\x9dp'|\x19l\x00\xdc:;\x89\x92\xa6\xcc\xd1\x04{\xf0\xde\xf7eE!x\xc2,Wr\xfbo\xa3$\xf5\xbdp}\v\xad\xd22Y\xb3/\xb3#3\x05\xb8͆(\xed\xf4\x01@0D\xdb\xf8\n\x10\xa8\x02\xb53u\x98\x12P\xb7\x88\xcb#nl\x97\xc6VKq=5\x9aBI\x83f\xc6\x00@\xb0\xbb\xb3\xd3z\x04\x10\xa4h\x12\xcd\v[9\xa0\v\xa6L\x124&+\x05Ԗ\u0086y7\xc8$#\xccٜ1\x80\xe0\x1f\x1a3\xb2\xf3\xff\xdb)f\\r\xb2k\xb6Y\xc1\r\xeak\xd4\x13\xc0\xfd\xcat0c\xe0\xb6\xf1\xed\xb69g\x90b\xc6Ja\xef\xc6/\xa1\x94\xf8\xa9\xc0\xc4b\n\xa8\xb5ғe<v\x15\xba\x94\x96\xe7\xd8#\xa3+po,XAP0\xcdr\xb4\xa8\xa7\xfc\xf0\xff\xb5\x96#Y\xee\xa8j,Ӷ\r\x98\xbb%~,Q\x8f\xdbM\x1a?\x96\\#q#c\xc2`\xabَ\x8bʬ\xe6r\xd8\x1e\x9c)\x9d3\xf2m\xc0\xa5\xfd\xfd\xb7`Y\x14\x96`-\xd8\x10/\r\xff\x8cO\x04\xaf\xfb\xfcVP\x172\xe1\xa2\xc1\x04ˆm\x0e\xf8l\x9e\x0e\xbd\xd8h-&(\x94YG\x0f^id\x16\x9f\x94\"4 ?k\xc2j\xde\xc6*\x1d/\xe6\xed\xa2\x96\x06m\xad.\xf1k\xc5˓k\x8d\x95>\x94\xf3\x1b\r7\xd5;\xe3\xf6\x17\xf7\x19\xf2\xf4\xb6\xb9I\xae\x99\x15\xe7E\xfaԲ\xa2\x01\xf99+VgE͌řA\x95\xd6\xfd2c\x85\x9ew\x9estU\x8e\xb6\xb2s\xbd\x12\xf6\r>\xad\n\xb6\xc6\xfb\x9c\x96\xab\x13\xe1\xbb$\xe4\xd7+\xb0R\x14hq\r\xbe\x1e\xb8\x8eO\x8a\xb2\r\xc8Ϭ\xfd\x19X;+\xbfs\xfe\xbc\xc7\xe5\xc1\x99\x1f\xfb\x84n\x0f<\xe2g\x1e?_\x1f\xfc\xf4\xd7\ak`\xa9\xaf.\u007f\xe2ی\xa7%QM\xcc\xcf\"\xf5\x04\xceJ\x15\xbd\xbe\xdba\xc9\x03}\xf8a\xe9i\xa5\xc3\x04\xf0s.\xfc/\x1f\x97\x9e\x16i\x9b\x98\x9fy\xfb\xb3\x1e\x98\xb6\xbf\xf8\xcfG]*?-b71?\x13\xfb\x8e\x13TM\x8e\xe7{\xe5\xef^+M\u07bfh\xa0\x98\xbe-\xe1.\xb2\xce,\xb3\xe5\xcc\x1b\x13K\xce|\x01\xca2\x9f\x99>8\x1bt\xfb\x83\xc3\xe37ʹ\xed\x9f\x1f\x1f\xb7\x1e\xf5\xfa\xfd\x93~\xf3\xc1\xa0\xd7\u007fwx\xdc\x1d\xf4\x0ej\xe4\x17\x8d\r\xb1N\x8f\xa9\xf9\x19\xd5i]\xce/\x00\xae\xe2\xbf1\x99\x1eڃB\x93\xf0Xޒ\x12\x92ܖ\xb4,\xa3V\x93\xff\x15\x91\xee=\x8e\x19Ç\x12\xd3KϚˇ͎2UڰX\xe0ԎYf\x88i\xcdf)\x1dp\x8b\xb9\x99מu\xf6\x8c&\f\xd3f\xcd\n\xd67i\xb6XQ\xcaX\xf0\xe42]\xee\x91X)\x81l\xf6t\u07b8}\xa8\x9b7ڠoW0\xa7w\xfdH\xfaT\xfd\xd7\xf0\xc0\x82\x89\a4x\xa17ND\xfa\x10\xab\x8b\x8d\x1d\xe3\xcd#\x8d\xad\xeb\xc9\xc1\xac7\xee\xa1\"݃\x83\xa68\x9c\x9f\x1et\a\xbd擃\xdeQo\xd0[)\x15dc\tBk5\x8fK\x8b\x8f\t\xf5Cs\xfe!\x14\xa9\xf1\xb6\x18rG\x1cfF=P\xcc\xfb-\xdd>>\u007f\xf7goF\xb8O\xfe|\xdb{5h>\xe9\xf6\xfb\xdd\xff4\x1f\xfcyrr4k\xe4\xe8\xe8\x0e\x95\xef/\xd7\xf8E/\xb5|\x1f\xc5_\xed\uf177S?\x02\xb0E?Q-ǵ\xca\xc6ڋ[ld\xee\xe7\xddGx\x87\xb5v\xfa\xaf\xafc\xf3\xd7+\x8f\x80\xbb\xb0,\xbcoIx\a\xe0\xf9\xf7?\x1f\x018Q\xe5\xbc\u007fW\\\xfd/\xbf\xf8\x9f)x\xda\xef\xe2>\xb06\xb9\xef;\x1a\xb7\xf7\xf1\xe1\u05cb\xfa\xb7q\xe2b.}u'\xce\x1fH\xd6\xf6\xe2\xd9ܯ\xa6?v\x1d>}I\xfd\xfe%|\xbd\xcb~\aVOʖ\x87\xc4d\xd1[o\xf7\x15\xf0\x85w\x1ck\x1a)\xb4\xb2*.\xb3\xae\x1c?\xb6¾,\xb5\xb8OV\xcd]\x04\x9d\xf7\x8f\xb65\x1aU\xea\x04\x81H\x03v\xc4,\x94\x92\u007f,Q\x8c\x81\xa7(-\xcf8\x1a\xb0#\x04\xb2\r*s\u007f\x1bԜ\t\xfe\x19\xd3H\xba%%J@\\f\x19j\xc8\xd1\x186\xc4\x10\x06#\x04\xc1\x8c\x05\x83\xc3\x1c\xa5\xad\a\x9f\xf7\x8f^\x18(\x98\x1dA^\x1a\v\x1a\v\x8d\x06\xa5\x8d$5g\xa5\x10c\xf8X2As\xa7\x1eY5\xd4a\xd8d\x06\xb8\x8c\xe4\x15\x99\xd8\x1e*5\x14\x18֎\r\x0fJ\u007f\x93v\xb5\xe5\x11\xb8\xe1f\xa4J\x91B\x8c\xc0%0H\x98T\x92'L\x00IM$71\x1c\x86\x1d\x10\xc8R.\x87\x10\x05a\x14\x007 \x95\x05\x96$XXL\xb7\xc2HF\xf2PB\xa1Yby\x82\x1d\xb0\xc8r\x03\xa5)\x19!.4&*/\xb8\xa0I\xacrxc.\x99\x1e\x03\x13\xc2A7\xde\xc3v\x84㨺\xc1\x02n\xc1*(\x8d\x83Fc\x12%-~r\xde\xea\xcaq\b\u007f\xa9\x1b\xbcF\xdd!\xac\xe4;\x037#\x9e\x8c\xdc\x10;\xc2H:%D\xb8\x1aY[\\u\xfc\xa7\xb9\xea\x80\xd2 \x15\xf8\xd6\x0e(\x89\xb4nP\x8e\x01\x0e\xb1A\ve\x01\xcca\x8b\xa4g\xb7\x87\x98\xb3\xc2xo\xbb\x19\xad\xaa\xc3\n\x8d\xa4\x04f SB\xa8\x1b\xb3G\xce\xf9'\x1cf\xd3)Ɂ\x85V\xd7<\xc5t\x82\x8a\x1e2c\xca\x1cӐ\x06t%\xfc5\x18\x9c\u009b\xde\x00\x94\xac\xe9\xe1y1\xe6(R`\xf0\xbe\x1db*\xe5/\xde_D\x12\xe0\x9a\x89\xd2y\xae\xf2\xb4\xdf:\xdcګ\u007f-\x03L\xfa;B?\xdf\xf4\x1f\xcc\x18`\x1a)4\xea\x06SZa\xc2\x12b\xacR\x1f\xca\x024\x9aRX\x0313\x98V\xd0h\xc2\xf3\xfe\x91\xb3>b\xd7\xce\xfdy#\xee\xa9\x0f<\xab\xc1\xd0\xdf\u05ca\xa7\xc0\xe4\x98\xc6zӎ\x96\x1a3\xa5\xb1S\xf7$\x03\xcc\xf2\x98\vn\xc7 \x11S\xe7\xf3\x18\xc1\xa5\x86\xbe\xa6D\x03\x82\x91\x8c\x98\x1c\xa2ku\x8c\na\xf3\xdc T\xdaM\v\xa1\xa0\x11\xe9}ԘdC\a<\xd6\xc8>\x10\xbb+\v\xe1\x16\x85\xecXY\xdc\x03;\xe2\x06\xb2R&\x9e\x1a\x84\xa1b\u007fRj\x8dҊ1\xb0k\xc6\x05\x8bń\xa7*\xcbx\u0099\xa8\x14 .3\xd0(\x90\x19\xec\x00\x93)\x11\xbb2R\x92\v\x89\xbdSB\xc58\xe4R\x12\x9c\x1bnG\x91\xa4\x96\xd0Ǚt6LT\xee\xf2ͩ,\x1aPv\xe4\xa9)\xdb<\x87M2<B\xc0\xbc\xb0\xe3\x8a{[\x90\xf3\xe1\xc8B\x8c\x91t\xb3\xd3,\xc0\xf3B )\x91\x8b?\x98\x02\x13\x9e\xf1\x04\f\xe6LZ\x9e\x98p\xc9\xc6H${X\x01\x13\x8f-\xae\x94\xe1w\xc4\xf4\x18\x81\x11\x95y\xdaPVh\vk\xa5\x81,V\xd7X\x83\xaf\x02\x1e.(\x8f\x1bGʙ\x19\xaf\xbar|\xe5T\x86qJ\x02\tL\xc7\xdcj\xe2\xe1\x8a\xd9\xeb\xfcgBUQ\x03\x16IJV'\x18~\x92x\xe5^1\xd9\x1a(\xb2\xa75i\x04\x8f\xddܕV\x180eQ(\xedd\xb1`ɇ\xedR\xd2\a\x89\xa1OwS3Ћ\xb7ʠ\xb4>qj\n\x1b\xcaP\x96\xa6\xdc\xf3\x19\x86(Q3\xeb\x10ؑJM\x8d\x8dl:\xff\x11\xa2\xde'F\x04\x81\x97{pJ\x13\x12\x89\xab\xb9\xd9d\xf9\\«_~q\xfdɹ\xaf\x95\x82L)؇0\f\xff\xf0\xcf\xc8(\x93\xe3\xea\x1b\x93\xe3\x90̽\xd6*\xdf̔ڪ\x9e\x87a\xe8\xff\xe0\x19lR\xa7s7\xd5@mF\xe5\xce\xce\xee\xef\xd4u\v\xbe\xf8>\x8d\xee\xb7M\xa8\xbbw@}ˮ\xd9:Xa\xdf\xed5d`%Fn6_+\x15&\x82\x19\xd3D\xe7\xcdR\x0f\x8f\xa2\xd1\xeb\x8f\x06l\xa8q\xffz\a\xeeӱ\x1d)9A\xeeͿVj3\fI\xb7*\xbfzԛ[\xb3\x8ev\v\x98\xc7O͇\x1e\xfeA\xef\xecU\xff\xf0tp\xd2\xdfګW0\x8d@c|e\xa1\x01\xfc\xb7;\x80\xbfQ5f\azo\x1f|4\x8b8|\xadԗ0\fo\xabf&\xc7\x1dژ\xa8O\xe1\xa5\xfc\x1d\xd3f\xc4\x04\xad\xa9\x81a\xb2\x88\x85\x16ks<k\x19;\x97\xf9Ԝ\x9b\xcc\x05\xd6\xf5\xfa\xbf}\x90\\L\xc3ט\xc3ŉ\xea&\xb7\xb6:]\xea}\x1c\xe21\x14\xedĽ\xe1BPCuuEr\x1f\xc9\x17\v\x14}\x9bJ\xbb\xd05\xd0\x06\xf5\x82ꇉZ\x90\x92\x90W\xe9\x81\xf7l$'\xd9*Ÿ\xaew\xe6\xea\xc3Ɇ\a,\xb3\xe8\xf7\x02Wv\xbe\xd8~\x11\xc9J*\xea)|\x15\x85U4\xa3 S*\x8c\x99v\xe8>m\x8f\xc3\xcfQ\xe0\xd7\xe3\x8b\x0f_\x189\xe3Q\xe0Z\x1d\x1d\"\xf9\xf6\xec\xe48\x92\xfb\xfb\xfb\xfb\xde[\xf4}Z\xc8\xfa\xfdE\x11\xe9\xc0˭\xafSJS\xe9\xa3\xc6a)\x98\x8e\xe4\xfc\x10jNq*\x9a\x1d\xc0<\xc64\x9d\xcag\xa7R_\x19Ɇ\xc6e\x0e\xf0տ\t\xf2UU\"ND\xbe邰&\xf3^MUr6\xf1wZge\\`\x95\xb85\xb9OQ\x1b%\xa7\x9c\xf1\xfb\x1ed\\\x1b{\xe9<\xb4\x0f/\xffh\xb5R\x1c\xea\xc6\xdd\x19%\x00\x98\x9a\x8a\x02\x87:\n\xf6 \n\x16\xf1f\x16X\xe8\xa1DAgj\xc0\xc18f\xb97R\xee\xec\xfc\x9ax\b\xeeol\xf4$H\xcb;6 \x1efUY1\xeb}\xefGn\xe0\x06\x85\xf8\xd7\a\xa9n\xa4\xe3\xed\x88\x19:Y\x94ƪ\x1c<=f\x83\xdb\xf1\x1be+\xe2>y\x1a\xd3PH\xe5\x10\x98\x0fh$\xaf\x1cuꈎ\x94H}8\x1b3\xb9CM\xc5\x04\xa8N\x1e\x15\x11\"\xe9\xccLb\x0e\x9b\xc4\xffz)\xef\x97\x1d\x9e.\xde_l\xed=&N\xb3\xe6fB\xe5\xd6\xe3m\xbc\fw_\xee\x9a(\xa8\xbc>{T\x9e\xf9)\xfe\x11gel\x19X\xfbR#Q\xe9Ҫ\x8fK\x8bC\xd4+\xee\xad~\xdd]l\xb5\xf2\xfdC\x00\xa5h\x19\x17\xdf슥y7q\x8f\xbb\x95*NgV#\xcb\x1f\x1d\xad\xa1.\x92\xcbo\xe3y:/\\\xfepAu\xa8\x16\xffj\xfc\x049\xb1A\xff\xdfn\xfc7\x00\x00\xff\xff\xd7n}\xe17C\x00\x00",
		hash:  "e231e04fdef0a47ba419cb768010ef391f835914fe1e24f42bc7001bc0b1946e",
		mime:  "application/json",
		mtime: time.Unix(1597070732, 0),
		size:  17207,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
