package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec[oo\xdb8\xf2~\x9fO1?\xfd\x0ehr\xebS\xd2\xecb_d\x11།\xdb\xcd\"M\x03\xc7yq\xa8\x82\x84\x92F6\xb7\x14\xa9\x92TRo\x91\xef~\x18R\xb2e\xc5v\x1c\xa7-\xea^\n\x14\xb6\xf9g\xf8p晇\u007f\xa4|\xde\x02\b\xcc-\x1b\x0eQ\a\a\x10\xec\x87{A\x87ʸ\xccTp\x00T\x0f\x10Xn\x05R\xfd+&\xb9\x81n\x9as\tݳc\xd7\x16 \xb8Am\xb8\x92\xd4b/\xdc\v_\x06[\x00w\xceN\xa2\xa4)s4\xc1\x01\xbc\xf7mYQ\b\x9e0˕\xdc\xfd\xcb(Im/]\xdbB\xab\xb4LVl\xcb\xec\xc8L\x01\xee\xb2!J;-\x00\b\x86h\x1b?\x01\x02U\xa0v\xa6\x8eS\x02\xea&qu\u008d\xedR\xdfj*\xae\xa5FS(i\xd0\xcc\x18\x00\b\xf6\xf7\xf6ZE\x00A\x8a&Ѽ\xb0\x95\x03\xba`\xca$Ac\xb2R@m)l\x98w\x9dL2\u009c\xdd3\x06\x10\xfcCcFv\xfe\u007f7ŌKNv\xcd.+\xb8A}\x83z\x02\xb8_\x99\x0ef\f\xdc5~\xdd5\xc7\fR\xccX)\xec\xc3\xf8%\x94\x12?\x15\x98XL\x01\xb5Vz2\x8d\xa7\xceB\x97\xd2\xf2\x1c{dt\t\xee\xad93\b\n\xa6Y\x8e\x16\xf5\x94\x1f\xfe_k:\x92厪\xc62mۀ\xb9\x9b\xe2\xc7\x12\xf5\xb8]\xa5\xf1c\xc95\x1272&\f\xb6\xaa\xed\xb8\xa8\xccj.\x87\xedΙ\xd29#\xdf\x06\\\xda_\u007f\t\x16Ea\x01ւ\r\xf1\xca\xf0\xbfqC\xf0\xbaϯ\x05u.\x13.\x1bL\xb0l\xd8\xe6\x80\xcf\xe6i\xd7˭\xd6d\x82B\x99U\xf4\xe0\x95Ffq\xa3\x14\xa1\x01\xf9Y\x13\x96\xf36V\xe9x>o\xe7\xd54hku\x89_*^\x9e\\+\xcct]\xceo5\xdcT\xaf\x8c\xbb\x9f\xddg\xc8ӻ\xe6\"\xb9bV\\\x14\xe9\xa6eE\x03\xf2sV,ϊ\x9a\x19\xf33\x83vZ\x8fˌ%z\xdey\xce\xd1\as\xf4\x8a\xa7w\xbb\\\xdep\xeb7\xbe\x9f\xf1\x93E-\x99\xb8Z/yߠ\xdf0\x1eOLnJ\x0eO\x11?\xa7\xf0\n)|\xf5\xbd\xa4p\x83\xb0\xdf\x00\xd0W\xca\xc5V\xb2\xadv\x9c\xacsmS2\xac\xc6\xfb\x9c_\xcb\x19\xbd\x19D\x9e\x1cvR\x14hq\x05\xbe\x1e\xb9\x86\x1bE\xd9\x06\xe4g\xd6\xfe\b\xac\x9d\x95\xdf{\xfe|\xc4E\u07b9\xef\xbbA7y\x1e\xf13\x8f\x9f\xaf\xf2~\xf8\xab\xbc\x15\xb0ԏ\x11~\xe0\x9b\xc5͒\xa8&\xe6g\x91ڀ{\x8b\x8a^\xdf\xec\xe2\xc2\x03]\xff\xb0\xb4Y\xe90\x01\xfc\x9c\v\xff\xcbǥ\xcd\"m\x13\xf33o\u007f\xd4\x03\xd3\xeeg\xff\xf9\xa4\a<\x9bE\xec&\xe6gb?p\x82\xaa\xc9\xf1\xfc\x8c\xe7\x9b\xef\x95&\xefB5PL\xdf\\r\x17Y\xe7\x96\xd9r\xe6\xed\xa5\x05g\xbe\x00e\x99\xcf\f\x1f\x9c\x0f\xba\xfd\xc1\xf1\xe9\x9bf\xda\xf6/NO[E\xbd~\xff]\xbfY0\xe8\xf5\xdf\x1e\x9fv\a\xbd\xa3\x1a\xf9ecA\xac\xd3cj~FuZ\x0f\xca\xe6\x00W\xf1_\x98L\x0f\xedA\xa1Ix,oI\tInKZ\x16Q\xab\xc9\xff\x8aH\x8f\xeeǌ\xe1C\x89\xe9\x95g\xcd\xd5z\xa3\xa3L\x956,\x168\xb5c\x16\x19bZ\xb3YJ\a\xdcbn\xeek\xcf*kF\x13\x86i\xb3f\t\xeb\x9b4\x9b\xaf(e,xr\x95.\xf6H\xac\x94@6{:o\xdc>\xd4\xd5[m\xd0wK\x98ӻy\"}\xaa\xf6+x`\xce\xc0\x03\xea<\xd7\x1b\xefD\xba\x8e\xd5\xf9\xc6N\xf1\xf6\x89\xc6V\xf5\xe4`\xd6\x1b\x8fP\x91\xee\xd1QS\x1c.Ύ\xba\x83^\xb3\xe4\xa8w\xd2\x1b\xf4\x96J\x05\xd9X\x80\xd0Z\xcd\xe3\xd2\xe2SB\xbdnίC\x91\x1ao\x8b!\x0f\xc4a\xa6ךb\xdeo\xe9\xf6\xe9\xc5\xdb\xdf{3\xc2\xfd\xee\xf7?{\xaf\x06͒n\xbf\xdf\xfdO\xb3\xe0\xf7w\xefNf\x8d\x9c\x9c<\xa0\xf2\xfd\xc5\x1a?\xef\x05\xb3o\xa3\xf8\xcb\xfd=\xf7v\xea{\x006\xef\x11\xd5b\\\xcbl\xac<\xb9\xf9F\xee=\xde}\x82wXk\xa5\xff\xf2:v\xffz\xe5\tp\xe7n\v\x1f\xbb%|\x00\xf0\x9c\xf7S\x9eB\xbf\xe9\xfb9_\x86\x86\xf7_\x15\u007f\x02\xbaD\x95\xf7ÿ\xe4\xc9\xc4\xe2\xe7\x123\xfb\xb1\xf6k\xfbkn\x9d\x1e\xfb:\xd7\xddc|\xf8\xe5H\xf9u\x9c8\x9f\xea_܉\xf7\xcfK+{\xf1\xfc\xdeC\xdd\xef\xfb\x980\xfd{\x96ǟ0\xeaM\xc07`\xf5dW\xb5VL\x10\xd33\xb7\xe9?:>Z{\x85\x99\xf7\x9a\xedz6\xd6[\xea\n\xad\xac\x8aˬ+\xc7O=F\\\x95Z<&7\xef\xddv]\xf4Ov5\x1aU\xea\x04\x81\xa8\av\xc4,\x94\x92\u007f,Q\x8c\x81\xa7(-\xcf8\x1a\xb0#\x04\xb2\r*s\xdf\rj\xce\x04\xff\x1b\xd3H\xba)%J@\\f\x19j\xc8\xd1\x186\xc4\x10\x06#\x04\xc1\x8c\x05\x83\xc3\x1c\xa5\xad;_\xf4O^\x18(\x98\x1dA^\x1a\v\x1a\v\x8d\x06\xa5\x8d$Ug\xa5\x10c\xf8X2Ac\xa7\x1eY\xd5\xd5a\xd8f\x06\xb8\x8c\xe45\x99\xd8\x1d*5\x14\x18֎\r\x8fJ\u007f]x\xbd\xe3\x11\xb8\xeef\xa4J\x91B\x8c\xc0%0H\x98T\x92'L\x00\tV$\xb71\x1c\x86\x1d\x10\xc8R.\x87\x10\x05a\x14\x007 \x95\x05\x96$XXLw\xc2HF\xf2XB\xa1Yby\x82\x1d\xb0\xc8r\x03\xa5)\x19!.4&*/\xb8\xa0A\xacrxc.\x99\x1e\x03\x13\xc2A7\xde\xc3v\x84㨺\xa6\x03n\xc1*(\x8d\x83F}\x12%-~r\xde\xea\xcaq\b\u007f\xa8[\xbcA\xdd!\xac\xe4;\x03\xb7#\x9e\x8c\\\x17;\xc2H:=E\xb8\x1eY[\\w\xfc\xa7\xb9\xee\x80\xd2 \x15\xf8\xda\x0e(\x894oP\x8e\x01\x0e\xb1A\ve\x01\xcca\x8b\xa4g\xb7\x87\x98\xb3\xc2xo\xbb\x11\xad\xaa\xc3\n\x8d\xd4\x06f SB\xa8[s@\xce\xf9'\x1cg\xd3!Ɂ\x85V7<\xc5t\x82\x8a\n\x991e\x8eiH\x1d\xba\x12\xfe\x18\f\xce\xe0Mo\x00J\xd6\xf4\xf0\xbc\x18s\x14)0x\xdf\x0e1\x9dW.\xdf_F\x12\xe0\x86\x89\xd2y\xae\xf2\xb4_\x80\xdcܫ?\xcf\x03&\xfdE\xa8\x1fo\xfa\x17z\x06\x98F\n\x8d\xbaŔf\x98\xb0\x84\x18\xabԇ\xb2\x00\x8d\xa6\x14\xd6@\xcc\f\xa6\x154\x1a\xf0\xa2\u007f⬏؍s\u007fވ{\xea\x03\xcfj0\xf4\xfdF\xf1\x14\x98\x1cS_o\xda\xd1Rc\xa64v\xea\x96d\x80Y\x1es\xc1\xed\x18$b\xea|\x1e#\xb8\xd4\xd07\x94h@0\x92\x11\x93Ct\xb5\x8eQ!l_\x18\x84j\x05\xa0\x89PЈ\xf4>jL\xb2\xa1\x03\x1ekd\x1f\x88ݕ\x85p\x87Bv\xaa,\x1e\x80\x1dq\x03Y)\x13O\r\xc2P\xb1?)\xb5Fi\xc5\x18\xd8\r\xe3\x82\xc5b\xc2S\x95e<\xe1LT\n\x10\x97\x19h\x14\xc8\fv\x80ɔ\x88]\x19)Ʌ\xc4\xde)\xa1b\x1cr)\t\xce-\xb7\xa3HRM\xe8\xe3L:\x1b&*w\xf9\xe6T\x16\r(;\xf2Ԕm\x9e\xc36\x19\x1e!`^\xd8qŽ\x1d\xc8\xf9pd!\xc6H\xba\xd1i\x14\xe0y!\x90\x94\xc8\xc5\x1fL\x81\t\xcfx\x02\x06s&-OL\xb8`y%\x92\xad\xb7\r\x8a\xc7\x16\x97\xca\xf0[bz\x8c\xc0\x88\xca<m(+\xb4\x85\xb5\xd2@\x16\xab\x1b\xac\xc1W\x01\x0f\xe7l\xb2\x1b\xe7\xe6\x99\x11\xaf\xbbr|\xedT\x86qJ\x02\tL\xc7\xdcj\xe2\xe1\x92\xd1\xeb\xfcgBUQ\x03\x16IJV'\x18~\x90x\xe9Z1Y\x1a(\xb2g5i\x04\x8f\xddؕV\x180eQ(\xedd\xb1`ɇ\xddR\xd2\a\x89\xa1OwS3Ћ\xb7ʠ\xb4>qj\n\x1b\xcaP\x96\xa6\xdc\xf3\x19\x86(Q3\xeb\x10ؑJM\x8d\x8dl:\xff\x11\xa2\xde'F\x04\x81\x97\apF\x03\x12\x89\xab\xb1\xd9d\xfa\\«\x9f~r\xedɹ\xaf\x95\x82L)8\x840\f\u007f\xf3ed\x94\xc9q\xf5\x8b\xc9qH\xe6^k\x95ogJ\xedT\xe5a\x18\xfa/<\x83mjt\xe1\x86\x1a\xa8\xed\xa8\xdc\xdb\xdb\xff\x95\x9a\xee\xc0gߦ\xd1\xfc\xae\tu\xff\x01\xa8\u007f\xb2\x1b\xb6\nV8tk\r\x19X\x8a\x91\x9b\xed\xd7J\x85\x89`\xc64\xd1y\xb3\xd4£h\xb4\xfa\xad\x01\x1bj\xdc??\x80\xfbllGJN\x90{\xf3\xaf\x95\xda\x0eCҭʯ\x1e\xf5\xf6ά\xa3\xdd\x04\xee\xe3\xa7\xeac\x0f\xff\xa8w\xfe\xaa\u007f|6x\xd7\xdf9\xa8g0\x8d@\xa3\u007fe\xa1\x01\xfc\x97\a\x80\xbfQ5f\a\xfa\xe0\x10|4\x8b8|\xad\xd4\xe70\f\xef\xaaj&\xc7\x1dZ\x98\xa8M\xe1\xa5\xfc-\xd3f\xc4\x04ͩ\x81a2\x89\xb9\x16ks<k\x19\xbb\x90\xf9Ԝ\x1b\xcc\x05ֵ\xfa\xbfC\x90\\L\xc3\xd7\x18\xc3ŉ\xf6Mnnu\xba\xd4\xeb8\xc4c(ډ{˅\xa0\x8a\xea~\x8e\xe4>\x92/\xe6(\xfa.m\xedBWA\v\xd4\v\xda?LԂ\x94\x84\xbcJ\x05\u07b3\x91\x9cd\xab\x14\xe3z\xbfso\u007f8Y\xf0\x80e\x16\xfdZඝ/v_D\xb2\x92\x8az\b\xbf\x8b\xc2*\x9aQ\x90)\x15\xc6L;t\x9fv\xc7\xe1\xdfQ\xe0\xe7\xe37\x1f~c\xe4\x8cG\x81\xabut\x88\xe4\x9f\xe7\xefN#yxxx\xe8\xbdE\xbf\xa7\x1bY\xbf\xbe(\"\x1dx\xb9\xf5\xfb\x94\xd2T\xfa\xa8qX\n\xa6#y\xbf\vU\xa78\x15\xcd\x0e`\x1ec\x9aN\xe5\xb3S\xa9\xaf\x8cdC\xe32\a\xf8\xfa\xdf\x04\xf9\xba\xda\"ND\xbe邰&\xf3AMUr6\xf1w\xba\xcfʸ\xc0*qkr\x9f\xa16JN9\xe3\xd7=ȸ6\xf6\xcay\xe8\x10^\xfe֪\xa58ԕ\xfb3J\x0005\x15\x05\x0eu\x14\x1c@\x14\xcc\xe3\xcd,\xb0\xd0C\x89\x82\xceԀ\x83q\xcaro\xa4\xdc\xdb\xfb9\xf1\x10\xdcwl\xb4$H\x8b\x1b6 \x1egնb\xd6\xfbޏ\xdc\xc0-\n\xf1\xaf\x0fR\xddJ\xc7\xdb\x113t\xb2(\x8dU9xz\xcc\x06\xb7\xe3\x17\xcaV\xc4}\xf24\x86\xa1\x90\xca!0\x1f\xd0H^;\xea\xd4\x11\x1d)\x91\xfap6Fr\x87\x9a\x8a\tP\x9d<*\"Dҙ\x99\xc4\x1c\xb6\x89\xff\xf5T\xde/:<]\xbe\xbf\xdc9xJ\x9cf\xcd̈́\xca\xcd\xc7\xdbx\x19\xee\xbf\xdc7QPy}\xf6\xa8<\xf3\xbe\xc1\x13\xce\xca\xd82\xb0\xf2\xd5H\xa2҅\xbb>.-\x0eQ/\xb9\xfd\xfay\u007f\xbe\xd5\xca\xf7\xeb\x00J\xd12.\xbe\xdaEM\xf3n\xe2\x1174U\x9cέF\x96?9ZC]$W_\xc7\xf3t^\xb8\xfa\xee\x82\xeaP\xcd\u007f4\xbe\x81\x9cآ\xffw[\xff\r\x00\x00\xff\xff\xed:\xf2\xee\xa8G\x00\x00",
		hash:  "8d3675bf93c6492839b545fe587a7ef29a37f4b8fbe65c8e8d6f0303900490f7",
		mime:  "application/json",
		mtime: time.Unix(1599235536, 0),
		size:  18344,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
