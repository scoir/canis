package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec[mo\xdb8\xf2\u007f\x9fO1\u007f\xfd\x0fhr\xeb\x93\xd3\xecb_d\x11\xe0\xb2m\xda\xcd\"M\x03\xc7yq\xa8\x82\x84\x92F6\xb7\x14\xa9\x92TRo\x91\xef~\x18R\xb2e\xf9!\x8e\xd3-\xd6=\x17(\x1c\xf3a\xf8\xe3\xcco\x86Ñ\xfce\a 0\xf7l0@\x1d\x1cBp\x10\xee\a\x1dj\xe32S\xc1!P?@`\xb9\x15H\xfd\xaf\x98\xe4\x06\x8eӜK8\xbe8uc\x01\x82;Ԇ+I#\xf6\xc3\xfd\xf0e\xb0\x03\xf0\xe0\xe4$J\x9a2G\x13\x1c\xc2\a?\x96\x15\x85\xe0\t\xb3\\\xc9\xee\x1fFI\x1a{\xed\xc6\x16Z\xa5e\xb2\xe2Xf\x87f\x02\xb0\xcb\x06(\xed\xa4\x01 \x18\xa0m|\x05\bT\x81ډ:M\t\xa8\xdb\xc4\xcd\x197\xf6\x98\xe6V[q#5\x9aBI\x83fJ\x00@p\xb0\xbf\xdfj\x02\bR4\x89慭\x14p\f\xa6L\x124&+\x05Ԓ\u0086x7\xc9$C\xccٌ0\x80\xe0\x1f\x1a3\x92\xf3\xff\xdd\x143.9\xc95]Vp\x83\xfa\x0e\xf5\x18p\xaf\x12\x1dL\txh|{h\xae\x19\xa4\x98\xb1R\xd8\xc7\xf1K(%~.0\xb1\x98\x02j\xad\xf4x\x1b\xcf݅.\xa5\xe59\x9e\x90\xd0%\xb8w\xe6\xec (\x98f9Z\xd4\x13~\xf8\u007f\xad\xedH\x96;\xaa\x1a˴m\x03\xe6n\x8b\x9fJԣv\x97\xc6O%\xd7H\xdcȘ0\xd8궣\xa2\x12\xab\xb9\x1c\xb4'gJ\xe7\x8ct\x1bpi\u007f\xfe)Xd\x85\x05X\v6\xc0\x1b\xc3\xff\xc4\r\xc1\xeb>\xff*\xa8s\x99p\xdd`\x82e\x836\a\xbc7O\xa6^\xef\xb46\x13\x14ʬ\x12\x0f^id\x167*\"4 oc\xc2r\xde\xc6*\x1d\xcd\xe7\xed\xbc\x9e\x06m\xad.\xf1k\xd9˓k\x85\x9d\xae\xcb\xf9\x9d\x86\x9aꓱ\xfb\xc5}\x86<}h\x1e\x92+z\xc5U\x91n\x9aW4 o\xbdb\xb9W\xd4̘\xef\x19\x94i=\xcd3\x96\xc4\xf3\xce\xd6G\x97\xf9h\xcb;WKa\xdf\xe2fe\xb05ޭ[.w\x84o\xe2\x90_/\xc1JQ\xa0\xc5\x15\xf8\xfa\xda\r\xdc(\xca6 oY\xfb=\xb0va\xf8\xed\nV\xcad\xb8F\x8et\xe6&nV-a\x02yK\xeb\xef\x9b\xd6fX\xdaT\xdd\xcb5\x88}YM\xdd(jO\x81ޒ\xfb\xfb#\xf7\x8c>\x9fP\xf0\xbd\xf4s7\xa8\xe2\xeb\x11oy\xbc-\xf9~\xf7%\xdf\x15\xb0ԏ\x9b\xbe\xe3\n\xf4f\x85\xa8&\xe6m\x90ڀ\xfaVE\xafoV\xe0\xf2@\xd7/pm\x96;\x8c\x01o}\xe1\u007f\xb9ĵY\xa4mb\xde\xf2\xf6{\xbd0u\xbf\xf8\xcfg=\b\xdc,b71o\x89\xfd\xc8\r\xaa&\xc7\xf6Y\xe07ϕ\xc6\xef\xcc5PL\xdeps\x85\xacK\xcbl9\xf5\x96ۂ;_\x80\xb2̧\x96\x0f.\xfbǽ\xfe\xe9\xf9ۦ\xdb\xf6\xae\xce\xcf[M'\xbd\xde\xfb^\xb3\xa1\u007f\xd2{wz~\xdc?y]#\xbfn\x1c\x88\xb5{L\xc4OE\x9d\xd6\x03\xd59\xc0U\xfc\a&\x93K{Ph\n<\x96\xb7B\t\x85\xdcVhYD\xad&\xff+\"=y\x1e3\x86\x0f$\xa67\x9e57뭎2UڰX\xe0D\x8eY$\x88iͦ)\x1dp\x8b\xb9\x99\x8d=\xab\x9c\x19M\x18\xa6͚%\xaco\xd2l~D)c\xc1\x93\x9bt\xb1Fb\xa5\x04\xb2\xe9\xdby\xa3\xfaPw\xef\xb4A?,`\x8e\xb5\x9a\xc7\xe5T\xde\xf5d\xf6\xac˃j\xcc\n\x8a\x9b\xc5ۧ\xb9O\xdee\u007fz\xc5'9x\xaf\xe5\xcb\xe7W\xef~=\x99r\xe6\xf7\xbf\xfe~\xf2\xaa\xdfl9\xee\xf5\x8e\xff\xd3l\xf8\xf5\xfd\xfb\xb3i!gg\x8fx~o\xb1\xdf\xcf{9\xed\xdbD\x81\xe5\xfa\x9e[\xb1\xf8;\x00\x9b\xf7\xa8y1\xaee2V\xde\xdc|!3\xafi<C;\xac\x15\xfd\xd7x\x05\xe7\x11\xb5\xcd^\xb9\x9f\x01wn\xaa\xf0\xd44\xe1\x11\xc0\xf3\x9e\xbd>\a\xf2\xb3c\xfc#pg^;\u007f\x06\xd8D\x95\xb3tXR\xbd^\\\xbb\x9e:\xb3\xdb?\x01X\xf3x}\xea\xaba\x0fO\xd1\xe1\xd7#\xe9_\xa3\xc4\xf9\xd4\xff\xeaJ\x9cͩW\xd6\xe2\xe5̃\xbf\xbfw*9\xf9m\xccӳ\xd0:)\xf8\x06\xac\x1egYk\xd9d\xee\xd3\xf6\xa7\x9e8\xf3^\xd9]O\xc6zG_\xa1\x95Uq\x99\x1d\xcb\xd1s\xe8E\xe3oJ-\x9e\xe2\x9b3\x15\x91\xab\xdeYW\xa3Q\xa5N\x10\x88z`\x87\xccB)\xf9\xa7\x12\xc5\bx\x8a\xd2\xf2\x8c\xa3\x01;D ٠2\xf7\xb7A͙\xe0\u007fb\x1aI\xb7\xa5D\t\x88\xcb,C\r9\x1a\xc3\x06\x18B\u007f\x88 \x98\xb1`p\x90\xa3\xb4\xf5\xe4\xab\xde\xd9\v\x03tχ\xbc4\x164\x16\x1a\rJ\x1bI\xea\xceJ!F\xf0\xa9d\x82\xd6N=\xb2j\xaað\xcb\fp\x19\xc9[\x12\xd1\x1d(5\x10\x18֊\r_\x97\xbe\xa4t\xbb\xe7\x11\xb8\xe9f\xa8J\x91B\x8c\xc0%0H\x98T\x92'L\x00\x05\xacH\xeeb8\b; \x90\xa5\\\x0e \n\xc2(\x00n@*\v,I\xb0\xb0\x98\ue151\x8c䩄B\xb3\xc4\xf2\x04;`\x91\xe5\x06JS2B\\hLT^pA\x8bX\xe5\xf0\xc6\\2=\x02&\x84\x83n\xbc\x86\xed\x10GQU\xca\x01n\xc1*(\x8d\x83Fs\x12%-~v\xda:\x96\xa3\x10~S\xf7x\x87\xbaCXIw\x06\xee\x87<\x19\xba)v\x88\x91t\xf1\x14\xe1vhmq\xdb\xf1\x9f\xe6\xb6\x03J\x83T\xe0{;\xa0$ҾA9\x068\xc4\x06-\x94\x050\x87-\x92\x9e\xdd\x1eb\xce\n\xe3\xb5\xedV\xb4\xaa6+4\\\x1b\x98\x81L\t\xa1\xee\xcd!)\xe7\x9fp\x9aM\x96$\x05\x16Z\xdd\xf1\x14\xd31*jdƔ9\xa6!M8\x96\xf0[\xbf\u007f\x01oO\xfa\xa0dM\x0fϋ\x11G\x91\x02\x83\x0fm\x13\xd3\xfd\xe5\xfa\xc3u$\x01\xee\x98(\x9d\xe6*M\xfb\x03\xc8\xed\xbd\xfa\xa9\x1f0\xe9\x8be~\xbdɯ\xfd\f0\x8dd\x1au\x8f)\xed0a\t1V\xa9\x8fe\x01\x1aM)\xac\x81\x98\x19L+h\xb4\xe0U\xef\xccI\x1f\xb2;\xa7\xfe\xbca\xf7\xd4\x1b\x9e\xd5`\xe8\xef;\xc5S`rDs\xbdhGK\x8d\x99\xd2ةG\x92\x00fy\xcc\x05\xb7#\x90\x88\xa9\xd3y\x8c\xe0\\Cߑ\xa3\x01\xc1H\x86L\x0e\xd0\xf5:F\x85\xb0{e\x10\xaa\x13\x806BF#\xd2{\xab1\xc9\x06\x0ex\xac\x91}$vW\x12\xc2=2ٹ\xb2x\bv\xc8\rd\xa5L<5\bC\xc5\xfe\xa4\xd4\x1a\xa5\x15#`w\x8c\v\x16\x8b1OU\x96\xf1\x843QE\x80\xb8\xcc@\xa3@f\xb0\x03L\xa6D\xecJHI*$\xf6N\b\x15\xe3\x80KIp\xee\xb9\x1dF\x92zBog\x8a\xb3a\xa2r\xe7o.ʢ\x01e\x87\x9e\x9a\xb2\xcds\xd8%\xc1C\x04\xcc\v;\xaa\xb8\xb7\a9\x1f\f-\xc4\x18I\xb7:\xad\x02</\x04R$r\xf6\aS`\xc23\x9e\x80\xc1\x9cI\xcb\x13\x13.8^\x89d\xeb\xa5A\xf1\xc8\xe2\xd20\xfc\x8e\x98\x1e#0\xa22O\x1b\x91\x15ځ\xb5\x8a\x81,VwX\x83\xaf\f\x1e\xceI\xb2\x1b\xf7\xe8\xa9\x15o\x8f\xe5\xe8\xd6E\x19\xc6\xc9\t$0\x1ds\xab\x89\x87KV\xaf\xfd\x9f\tUY\rX$\xc9Y]\xc0\xf0\x8b\xc4Kϊ\xf1\xd1@\x96\xbd\xa8I#x\xec֮b\x85\x01S\x16\x85\xd2.,\x16,\xf9\xd8-%}P0\xf4\xeenj\x06\xfa\xe0\xad2(\xadw\x9c\x9a\u0086<\x94\xa5)\xf7|\x86\x01J\xd4\xcc:\x04v\xa8RSc#\x99N\u007f\x84\xe8\xe43#\x82\xc0\xcbC\xb8\xa0\x05\x89\xc4\xd5\xdal\xbc}.\xe1\xd5\x0f?\xb8\xf1\xa4\xdc7JA\xa6\x14\x1cA\x18\x86\xbf\xf86\x12\xca\xe4\xa8\xfa\xc6\xe4($qo\xb4\xcaw3\xa5\xf6\xaa\xf60\f\xfd\x1f<\x83]\x1at\xe5\x96\xea\xabݨ\xdc\xdf?\xf8\x99\x86\xee\xc1\x17?\xa61\xfc\xa1\t\xf5\xe0\x11\xa8\xbf\xb3;\xb6\nV8rg\r\tX\x8a\x91\x9b\xdd7J\x85\x89`\xc64\xd1y\xb14£h\x8c\xfa\xa5\x01\x1bj\xdc?>\x82\xfbbd\x87J\x8e\x91{\xf1o\x94\xda\rC\x8a[\x95^=\xeaݽiE\xbb\r\xcc\xe2\xa7\xeeS\x0f\xff\xf5\xc9\xe5\xab\xde\xe9E\xff}o\xef\xb0\xde\xc1\xc4\x02\x8d\xf9\x95\x84\x06\xf0\x9f\x1e\x01\xfeV\u0558\x1d\xe8\xc3#\xf0\xd6,\xe2\xf0\x8dR_\xc20|\xa8\xba\x99\x1cu\xe8`\xa21\x85\x0f\xe5\xef\x986C&hO\r\f\xe3M̕X\x8b\xe3YKؕ\xcc'\xe2\xdcbΰn\xd4\xff\x1d\x81\xe4bb\xbe\xc6\x1a\xceN\x947\xb9\xbd\xd5\xeeR\x9f\xe3\x10\x8f\xa0h;\xee=\x17\x82:\xaaz\x1d\x85\xfbH\xbe\x98\x13ѻ\x94څ\xae\x83\x0e\xa8\x17\x94?\x8c\xa3\x05E\x12\xd2*5x\xcdFr\xec\xadR\x8c\xea|g&?\x1c\x1fx\xc02\x8b\xfe,pi\xe7\x8b\xee\x8bHV\xa1\xa2^\xc2gQXY3\n2\xa5\u0098i\x87\xeesw\x14\xfe\x19\x05~?>\xf9\xf0\x89\x91\x13\x1e\x05\xae\xd7\xd1!\x92\xbf_\xbe?\x8f\xe4\xd1\xd1ё\xd7\x16}\x9f$\xb2\xfe|QD:\xf0\xe1\xd6\xe7)\xa5\xa9\xe2\xa3\xc6A)\x98\x8e\xe4\xec\x14\xeaNq\x124;\x80y\x8ci:\t\x9f\x9d*\xfa\xcaH6b\\\xe6\x00\xdf\xfe\x9b \xdfV)\xe28\xc87U\x10\xd6d>\xac\xa9J\xca&\xfeN\xf2\xac\x8c\v\xac\x1c\xb7&\xf7\x05j\xa3\xe4\x843\xfe܃\x8ckco\x9c\x86\x8e\xe0\xe5/\xad^\xb2C\xddy0\x15\t\x00&\xa2\xa2\xc0\xa1\x8e\x82C\x88\x82y\xbc\x99\x06\x16z(QЙ\bp0\xceY\ue154\xfb\xfb?&\x1e\x82\xfb\x1b\x1b#\t\xd2\xe2\x81\r\x88\xa7Y\x95VLk\xdf\xeb\x91\x1b\xb8G!\xfe\xf5Q\xaa{\xe9x;d\x86n\x16\xa5\xb1*\aO\x8fi\xe3v\xfcAٲ\xb8w\x9e\xc62dR9\x00\xe6\r\x1a\xc9[G\x9dڢC%Ro\xce\xc6J\xeeRS1\x01\xaa\x9bGE\x84H:1c\x9b\xc3.\xf1\xbf\xdeʇE\x97\xa7\xeb\x0f\xd7{\x87ϱӴ\xb8)S\xb9\xfdx\x19/Ã\x97\a&\n*\xadO_\x95\xa7\x9eI?㮌-\x01+\x97F\x12\x95.\xcc\xfa\xb8\xb48@\xbd\xa4\xfa\xf5\xe3\xc1|\xa9\x95\xee\xd7\x01\x94\xa2e\\\xfce\x85\x9afmb\x95\n\xcd\x0e\xfd\u007f\xd8\xf9o\x00\x00\x00\xff\xff/a\x03r\xe0E\x00\x00",
		hash:  "b0969d99ab2591acd38dccae72210bd0c0718e5e31a9c0932b94994b2c3a0fdf",
		mime:  "application/json",
		mtime: time.Unix(1597060868, 0),
		size:  17888,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
