package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"canis-apiserver.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec\\oo۸\x93~\xdfO1\xa7;\xa0ɭWN\xb3\x8b}\x91E\x80\xcb6i7\x8b4\r\x1c\xe7š\n\x1cZ\x1a\xd9\xdcR\xa4JRN\xbdE\xbe\xfb\x0f$%\xebO\xe4رӴ\xee\xba@\xe1D\xa4\x86\x0fg\x9ey\x86\xa4\xe4|y\x01\xe0\xa9[2\x1a\xa1\xf4\x0e\xc0\xdb\xf7\xf7\xbc\x8e\xb9Fy,\xbc\x030\xed\x00\x9e\xa6\x9a\xa1i\u007fM8Up\x14%\x94\xc3\xd1ũ\xed\v\xe0MP**\xb8\xe9\xb1\xe7\xef\xf9\xfb\xde\v\x80;k'\x14\\e\t*\xef\x00>\xb8\xbe$M\x19\r\x89\xa6\x82w\xffV\x82\x9b\xbe\u05f6o*E\x94\x85K\xf6%z\xacJ\x80]2B\xae\xcb\v\x00\xde\bu\xe5W\x00O\xa4(\xad\xa9\xd3\xc8\x00\xb5\x93\x18\x9cQ\xa5\x8f̽\xf9TlO\x89*\x15\\\xa1\xaa\x19\x00\xf0\xf6\xf7\xf6\x1a\x97\x00\xbc\bU(i\xaas\a\x1c\x81\xca\xc2\x10\x95\x8a3\x06\x85%\xbfb\xdeޤ\xc21&\xe4\x9e1\x00\xef\u007f$\xc6\xc6\xce\u007fw#\x8c)\xa7Ʈ꒔*\x94\x13\x943\xc0\xbdܴW3pW\xf9\xed\xae:\xa6\x17aL2\xa6\x17\xe3\xe7\x90q\xfc\x9cb\xa81\x02\x94Rȧ\x9b\x86̸\xa6\t\x9e\x18\xab\x0f\x00\u007f\xd12\x05/%\x92$\xa8Q\x96\x04q\xff\x1a\xf3\xe1$\xb1\\U\x9aH\xdd\x04L\xed\x1c?e(\xa7\xcd&\x89\x9f2*ѐ#&La\xa3YO\xd3ܬ\xa4|Լ9\x162!ƹ\x1e\xe5\xfa\xb7_\xbdya\x98\x835%#\x1c(\xfa\x0fn\b^\xfb\xf9\xb5\xa0\xb62\xe1\xba\xc2\x04MFM\x0e\xb8t.o\xbd~ј\x8c\x97\n\xb5\x8c \xbc\x96H4n\x94$T oEa\x01q\x87\"\x9a\xb6\x13\xb7\xad\xa5\xc2[-3|\xaa\x809v-1\xd3UI\xff\xa2⦢6v\xbf\xd8O\x9fFw\xd52\xb9dZ\\\xa5Ѧ\xa5E\x05\xf26-\x16\xa4EA\x8d\xf6\xd40\x8b\xadǥ\xc6\x03\x8a\xde\xd9&\xe9\xc2$\x1d\xd0\xe8\xae\x1bJ\x8c\x90kJX\xf7\v~\xd6(9a\xb6\x81*\x95\xe1\n9|j\xee{=\xb3\xba)y܀\xbd\xcd\xe5ery\xf0\xbd\xe4r\x85\xb9[q\xa9.ي,\xfc\x86\nC\xf9\x84j\xb7\xbb\xae)\xcc\n\xda\xf2\x16ݮ\xf4tfrc\xe4e\x86x\xab,[e\xf9z\x1b\xd1EɘJT\xc8\xdbұk@c-\r\x97M˞\xbb\xf3\xa2b{S\xf2\xb2\x05\xfa6A\xb7\t\xba\xf1\xa5\xbf-%\x9f}\r\xd0(\xf2˝\x95\x175~S\x14\xa4\xc0\xbb\x95\x8d\x05y\xb1\x19\x05tv\x92\x1b!C\x8dK\x10\xf6\xd8v\xdc(\xceV oi\xfbCж.\xc0\xf7\xfc\xf9\x88甗\xee\xde\rzP\xe9\x10o\x89\xbc}R\xf9\xe3?\xa9\\\x02K\xf1\x9a\xc4\x0f\xfc\xe0t\xb34\xaa\x8ay\xabR\x9b\xb0{\xca\xf9\xf5l\x1b&\at\xf5\r\xd3f\xe5\xc3\f\xf06\x19\xfe\xd5[\xa6\xcdbm\x15\xf3\x96\xb8?즩\xfb\xc5}\xae\xf5\x06\xcbf1\xbb\x8ay\xcb\xecE\xbb\xa8\x82\x1d\xdb\xc3\xe6g_.\xcd\xde\xf7\xae\xa0(\xdfζ\xc7Y\x97\x9a\xe8\xac\xf6\x86\xf6\x9c}\x9f\x87<Kj\xc3{\x97\xfd\xa3^\xff\xf4\xfcm5o{W\xe7\xe7\x8dK'\xbd\xde\xfb^\xf5B\xff\xa4\xf7\xee\xf4\xfc\xa8\u007fr\\ \xbf\xae\x94\xc4\"?J\xf35\xd9i\xbc\t\xd4\x02\\\f\xffưܸ{\xa94ʣiCK\x8c\xe66\xb4e\x1e\xb5\xaa\xfcω\xf4\xe8\xfb\x88Rt\xc41\x1a8\xd6\fV\x1b\x1dy$\xa4\"C\x86\xa5\x1d5\xcf\x10\x91\x92\xd4)\xedQ\x8d\x89\xba/>\xcb\x14\x8d*\f\xd5d\xcd\x03\xac\xafҬ]Q\xb2!\xa3\xe1 \x9a\uf461\x10\fI\x85\xe7w\xad\x15\xa9N\x8d\x93ɚ\xfc\xc8\xfb/1Ŗ\x81\xfb\xe6\xe6\xd6\xe9\xbeg\xd1*Vۍ\x9d\xe3\xed\x9aƖ\xf5d\xbf\xee\x8dG\xc8\xc4\xd1\xf1q5\xfb\xaf.\x8e\x8f\xfa'\xd5+\xc7'g'\xfd\x93\a\xb5\xc0ؘ\x83PkyZ\xfdZ\xcc\n\x91^5\xa7%\x9aְ\xae\xab\x8f\xd1\x12\xc1\a\x12'\xe2#.\x12\x83Z\x12\x97gof\x1d\xf2\xb3)\xe5\xcb\aTkI\x87\x99\xc6o\xe1\xafU2\xaa\xc0\xdbH\xa8%g\xb9:k/\xfb\xbdF\x1d;\xbfz\xf7\xc7I\xad\x90\xbd\xff㯓\xd7\xfdꕣ^\xef\xe8\xff\xab\x17\xfex\xff\xfe\xacn\xe4\xeclA\xd5\xebͯym\xdf)x\x9e\n\xf8\xb0\xbf[O\xec\xbe\x13`\xc5\x1b}k\xc0Y\xabd\x87\"I\xea\x95h\xad|Yj\xadQ\xd0\xff\t\x96\x06K\xbf2Y*K\xfb\xf2a\xd9@}S\x85\x9a\x10\x96\xe1\x13q\xaf\xed\xa1\xf1\xfc)=dc\xe9\xc4j7r\uf34b5\x1cKF-\\~\xd2%\xc7\xfd\xd3ε3\xf7\x91x\x9b۳\x05\x80[^U]G\xfa\xcaWu\x9f\x86\x86\xf3^\xd4_\x03c\xf9\x1d\x88\xc1\x93)\xf5\xfdoЮ\x03Pd\v\x15wΒ\xaa\xf18\xb3&\xab\xcdo3\u007f\x1dI\xbd\xf7\x15\x97\xbb\xc7\xf8\xf0\xe9r\xe7\xeb8\xb1=#\x9f܉\xf7\x8fX\x96\xf6\xe2\x85Ĉ\x86D\xe3\xb7\xdaV\xa4\x83U\v\u007f:x\\\x01\xdb\xec\xbdL\xdb;\x9b\xff\xa2U\xde-el\x10\n\x1eS\x99,\u007frR\v\xb9\xf5\x1fF\x83\xc5\vƆ\x13] \xa2Ȧ\x1da\x17\xed.]v\x83g\x13m\xe1\xa1S\t7-2\xf4\xf9\xe1\xd6\xc5a\x15yy\xe8\r\xfa5؛{gP\xfd\xc2\xc2\xd3U\xe7\xcb{/\xc8}ߧ\xad\xe5\x9f>y\xb6t\x9c)\xd9\n\xda\xc15~\xd6\xcf\u007f\x8c\xfb\x8c\xfb\xc4\xf5v\x87\x97\x88х=&>>=^y\x1f\xd4\xf6\xd5\xf3\xd5l\xac\xb6!K\xa5\xd0b\x98\xc5G|\xba\xee\xb9\xf4 \x93\xec1e\xf6\xde\x03ҫ\xdeYW\xa2\x12\x99\f\x11L\x96\x81\x1e\x13\r\x19\xa7\x9f2dS\xa0v\x81\x1fST\xa0\xc7\b\xc66\x88\xd8\xfe\xacPR\xc2\xe8?\x18\x05\xdcN)\x14\f\x86Y\x1c\xa3\x84\x04\x95\"#\xf4\xa1?F`DiP82\x85\xb1\xb8\xf9\xaaw\xf6RAJ\xf4\x18\x92Li\x90\x98\vV\xc0Ms\x9c16\x85O\x19af\xec\xc8!\xcbo\xb5\x18v\x88\x02\xca\x03~cLtGB\x8c\x18\xfa\x85c\xfd\xe3\xcc=a\xbe\xd9u\b\xec\xedj,2\x16\xc1\x10\x81r \x10\x12.8\r\t\x03\x93\xb1\x01\xdfA\u007f\xe4w\x80!\x89(\x1fA\xe0\xf9\x81\aT\x01\x17\x1aH\x18b\xaa1\xda\xf5\x03\x1e\xf0S\x0e\xa9$\xa1\xa6!v@#I\x14d*#\x06q*1\x14IJ\x99\x19D\v\x8bwH9\x91S \x8cY\xe8\xcayX\x8fq\x1a\xe4Ov\x81j\xd0\x022e\xa1\x99{r)0S>\xe2S\x1f\xfe\x14\xb78A\xd91X\x8d\xef\x14\u070ei8\xb6\xb7\xe81\x06\xdc.Z\x10n\xc6Z\xa77\x1d\xf7\xa9n: $p\x01\xae\xb5\x03\x82\xa3\x997\x88\xd4\x15@6\x05\x85\x1a\xb2\x14\x88\xc5\x16p\xc7n\a1!\xa9r\u07b6#jQ\x84\x15*\xa9\rDA,\x18\x13\xb7\xea\xc08\xe7\u007f\xe14.\x874\x0eL\xa5\x98\xd0\b\xa3\x19*s\x91(\x95%\x18\xf9\xe6\x86#\x0e\u007f\xf6\xfb\x17\xf0\xf6\xa4\x0f\x82\x17\xf4p\xbc\x98Rd\x11\x10\xf8\xd0\fq\u007f\x9a\xe2\xf5\x87\xeb\x80\x03ص\xae\xf1\\\xeei\xa7\xc0v\xee\xf9\x1f\xad\x02\xc2ݳs7^\xf9w\xab\x14\x10\x89&4\xe2\x16#3Ð\x84\x86\xb1B|\xccR\x90\xa82\xa6\x15\f\x89\xc2(\x87f\x06\xbc\xea\x9dY\xebc2\xb1\xeeO*q\x8f\\\xe0I\x01\xc6\xfc<\x114\x02§\xe6^g\xda\xd2Rb,$v\x8a\x9e\xc6\x00\xd1tH\x19\xd5S\xe0\x88\x91\xf5\xf9\x10\xc1\xa6\x86\x9c\x98D\x03\x03#\x1c\x13>B\xdbj\x19\xe5\xc3ΕBȋ\x9d\x99\x88\t\x9a!\xbd\x8b\x1a\xe1dd\x81\x0f%\x92\x8f\x86ݹ\x05\u007fׄ\xec\\h<\x00=\xa6\n⌇\x8e\x1a\x06C\xce\xfe0\x93\x12\xb9fS \x13B\x19\x19\xb2\x19OE\x1cӐ\x12\x96+\xc00\x8bA\"C\xa2\xb0\x03\x84G\x86ع\x91̸а\xb7$\xd4\x10G\x94s\x03\xe7\x96\xeaq\xc0M\x8b\xef\xe2lt\xd6\x0fEb\xf3ͪ,*\x10z\xec\xa8ɛ<\x87\x1dcx\x8c\x80I\xaa\xa79\xf7v!\xa1\xa3\xb1\x86!\x06\u070enF\x01\x9a\xa4\f\x93be\x04*Ő\xc64\x04\x85\tᚆ\xca_\xfdDpΎf8\xd5\xf8\xa0\f\xbf3L\x1f\"\x10Ce\x1aU\x94\x15\x9a\u009ak \x19\x8a\t\x16\xe0\xf3\x80\xfb-\xab\xb8ʓ\x85ڈ7G|zcU\x86P\x93\x04\x1c\x88\x1cR-\r\x0f\x1f\x18\xbd\xc8\u007f\xc2D\x1e5 \x017\xc9j\x05\xc3\r2|\xb0V\xccJ\x83\x89\xecEA\x1aF\x87v\xec\\+\x14\xa8,M\x85\xb4\xb2\x98\x92\xf0c7\xe3\xe6È\xa1KwU0Љ\xb7\x88!\xd3.q\n\n+\x93\xa1\xe5Z\x1fF\xc8Q\x12m\x11豈T\x81\xcdش\xfe3\x88N>\x13C\x10xu\x00\x17f@C\xe2|l2\x9b>\xe5\xf0\xfa\xa7\x9fl\u007f\xe3\xdc7B@,\x04\x1c\x82\xef\xfb\xbf\xbbk\xc6(\xe1\xd3\xfc7§\xbe1\xf7F\x8ad'\x16b7\xbf\xee\xfb\xbe\xfb\x81ưc:]١\xfab'\xc8\xf6\xf6\xf6\u007f3]w\xe1\x8b\xebS\xe9~W\x85\xba\xbf\x00\xea_dB\x96\xc1\n\x87\xb6\xd6\x18\x03\x0fb\xa4j\xe7\x8d\x10~ȈRUtά\xe9\xe1PTz\xfd^\x81\r\x05\xee_\x16\u0f98\xea\xb1\xe03\xe4\xce\xfc\x1b!v|\xdf\xe8V\xeeW\x87zg\xb7\xeeh;\x81\xfb\xf8M\xf3\xa9\x83\u007f|r\xf9\xbawz\xd1\u007f\xdf\xdb=(fPF\xa0r\u007fn\xa1\x02\xfc\xd7\x05\xc0ߊ\x02\xb3\x05}p\b.\x9a\xe9\xd0\u007f#\xc4\x17\xdf\xf7\xef\xf2f§\x1dS\x98L\x9f\xd4I\xf9;\"\u055803\xa7\n\x86\xd9$Z-\x16\xe6h\xdc0vœҜ\x1d\xcc\x06\xd6\xf6\xfa\xafC\xe0\x94\x95\u1acca\xe3d\xd6MvnE\xba\x14u\x1c\x86SH\x9b\x89{K\x193\r\xf9\x13L#\xf7\x01\u007f٢\xe8]\xb3\xb4\xf3m\x83)P/\xcd\xfaa\xa6\x16FI\x8cW\xcd\x05\xe7ـϲ\x95\xb3i\xb1\u07b9\xb7>\x9c\x15< \xb1FW\v\xec\xb2\xf3e\xf7e\xc0s\xa9(\x86p\xab(̣\x19x\xb1\x10\xfe\x90H\x8b\xeesw\xea\xff\x13xn>n\xf1\xe1\x16F\xd6x\xe0\xd9VK\x87\x80\xffu\xf9\xfe<\xe0\x87\x87\x87\x87\xce[\xe6\xf7r!\xeb\xea\x8b0\xa4\x03'\xb7n\x9d\x92\xa9\\\x1f%\x8e2Fd\xc0\xef\xdfb\x9a#,E\xb3\x03\x98\f1\x8aJ\xf9\xec\xe4\xea\xcb\x03^Ѹ\xd8\x02\xbe\xf9?\x03\xf9&_\"\xceD\xbe\xea\x02\xbf \xf3AAU\xe3l\xc3\xdfr\x9d\x15S\x86y\xe2\x16\xe4\xbe@\xa9\x04/9\xe3\xea\x1e\xc4T*=\xb0\x1e:\x84W\xbf7ZM\x1c\x8a\xc6\xfd\x9a\x12\x00\x94\xa6\x02Ϣ\x0e\xbc\x03\b\xbc6\xdeԁ\xf9\x0eJ\xe0uJ\x03\x16\xc69I\x9c\x91lo\xef\x97\xd0A\xb0?c\xa5\xa7\x814\xbfc\x05\xe2i\x9c/+\xea\xdew~\xa4\nn\x91\xb1\x9f?rq\xcb-o\xc7D\x99\x9dE\xa6\xb4H\xc0ѣ\x1e\u070e+\x94\x8d\x88\xbb\xe4\xa9\fcB\xcaG@\\@\x03~c\xa9SDt,X\xe4\xc2Y\x19\xc9njr&@\xbe\xf3ȉ\x10pkf\x16s\xd81\xfc/\xa6\xf2a\xde\xe6\xe9\xfa\xc3\xf5\xee\xc1:q\xaa\x9b\xab\x85\xca\xce\xc7\xd9x\xe5\xef\xbf\xdaW\x81\x97{\xbd\xbeU\xae\xbd\xa1\xba\xc6^\x19\x1b\x06\x1eq&\x13\xcd]\xf5Q\xaeq\x84\xf2\x81\x87\x1f\xbf\xec\xb7[\xcd}\xbf\n\xa0\b5\xa1\xec\xab\x1d\xd4T\xcf&\x1eqB\x93\xc7\xe9RK$\xc9\xda\xd1\x1a\xc94\x1c|\x1dϛ\xfd\xc2\xe0\xbb\v\xaaE\xd5\xfe2\xe5\x06r\xe2\x85\xf9\u007f\xf7\xe2?\x01\x00\x00\xff\xff\x9b\u007f\t\xbd\xbeZ\x00\x00",
		hash:  "1c952046c8ef038ecd43be9f5c4a3f140004bc343a6db31b258ce24edc26218e",
		mime:  "",
		mtime: time.Unix(1602701382, 0),
		size:  23230,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
