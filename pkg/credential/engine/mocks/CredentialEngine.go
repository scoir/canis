package mocks

import (
	decorator "github.com/hyperledger/aries-framework-go/pkg/didcomm/protocol/decorator"
	datastore "github.com/scoir/canis/pkg/datastore"
)

// CredentialEngine is an autogenerated mock type for the CredentialEngine type
type CredentialEngine struct {
	Accep                           bool
	SchemaID                        string
	CreateSchemaError               error
	IssueCredentialAttachment       *decorator.AttachmentData
	IssueCredentialError            error
	CredentialOfferID               string
	CreateCredentialOfferAttachment *decorator.AttachmentData
	CreateCredentialOfferError      error
	RegisterError                   error
}

// Accept provides a mock function with given fields: typ
func (r *CredentialEngine) Accept(typ string) bool {
	return r.Accep
}

// CreateCredentialOffer provides a mock function with given fields: issuer, s
func (r *CredentialEngine) CreateCredentialOffer(issuer *datastore.DID, s *datastore.Schema) (string, *decorator.AttachmentData, error) {
	return r.CredentialOfferID, r.CreateCredentialOfferAttachment, r.CreateCredentialOfferError
}

// CreateSchema provides a mock function with given fields: issuer, s
func (r *CredentialEngine) CreateSchema(issuer *datastore.DID, s *datastore.Schema) (string, error) {
	return r.SchemaID, r.CreateSchemaError
}

// IssueCredential provides a mock function with given fields: issuerDID, s, offerID, requestAttachment, values
func (r *CredentialEngine) IssueCredential(issuerDID *datastore.DID, s *datastore.Schema, offerID string, requestAttachment decorator.AttachmentData, values map[string]interface{}) (*decorator.AttachmentData, error) {
	return r.IssueCredentialAttachment, r.IssueCredentialError
}

// RegisterSchema provides a mock function with given fields: registrant, s
func (r *CredentialEngine) RegisterSchema(registrant *datastore.DID, s *datastore.Schema) error {
	return r.RegisterError
}
