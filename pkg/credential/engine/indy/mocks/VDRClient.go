// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	vdr "github.com/hyperledger/indy-vdr/wrappers/golang/vdr"
	mock "github.com/stretchr/testify/mock"
)

// VDRClient is an autogenerated mock type for the VDRClient type
type VDRClient struct {
	mock.Mock
}

// CreateClaimDef provides a mock function with given fields: from, ref, pubKey, revocation, signer
func (_m *VDRClient) CreateClaimDef(from string, ref uint32, pubKey map[string]interface{}, revocation map[string]interface{}, signer vdr.Signer) (string, error) {
	ret := _m.Called(from, ref, pubKey, revocation, signer)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, uint32, map[string]interface{}, map[string]interface{}, vdr.Signer) string); ok {
		r0 = rf(from, ref, pubKey, revocation, signer)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint32, map[string]interface{}, map[string]interface{}, vdr.Signer) error); ok {
		r1 = rf(from, ref, pubKey, revocation, signer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNym provides a mock function with given fields: did, verkey, role, from, signer
func (_m *VDRClient) CreateNym(did string, verkey string, role string, from string, signer vdr.Signer) error {
	ret := _m.Called(did, verkey, role, from, signer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, vdr.Signer) error); ok {
		r0 = rf(did, verkey, role, from, signer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSchema provides a mock function with given fields: issuerDID, name, version, attrs, signer
func (_m *VDRClient) CreateSchema(issuerDID string, name string, version string, attrs []string, signer vdr.Signer) (string, error) {
	ret := _m.Called(issuerDID, name, version, attrs, signer)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, []string, vdr.Signer) string); ok {
		r0 = rf(issuerDID, name, version, attrs, signer)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []string, vdr.Signer) error); ok {
		r1 = rf(issuerDID, name, version, attrs, signer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredDef provides a mock function with given fields: credDefID
func (_m *VDRClient) GetCredDef(credDefID string) (*vdr.ReadReply, error) {
	ret := _m.Called(credDefID)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string) *vdr.ReadReply); ok {
		r0 = rf(credDefID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(credDefID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNym provides a mock function with given fields: did
func (_m *VDRClient) GetNym(did string) (*vdr.ReadReply, error) {
	ret := _m.Called(did)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string) *vdr.ReadReply); ok {
		r0 = rf(did)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchema provides a mock function with given fields: schemaID
func (_m *VDRClient) GetSchema(schemaID string) (*vdr.ReadReply, error) {
	ret := _m.Called(schemaID)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string) *vdr.ReadReply); ok {
		r0 = rf(schemaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schemaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEndpoint provides a mock function with given fields: did, from, ep, signer
func (_m *VDRClient) SetEndpoint(did string, from string, ep string, signer vdr.Signer) error {
	ret := _m.Called(did, from, ep, signer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, vdr.Signer) error); ok {
		r0 = rf(did, from, ep, signer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
