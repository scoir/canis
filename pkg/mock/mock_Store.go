// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	storage "github.com/hyperledger/aries-framework-go/pkg/storage"
	"github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: k
func (_m *MockStore) Delete(k string) error {
	ret := _m.Called(k)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: k
func (_m *MockStore) Get(k string) ([]byte, error) {
	ret := _m.Called(k)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(k)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Iterator provides a mock function with given fields: startKey, endKey
func (_m *MockStore) Iterator(startKey string, endKey string) storage.StoreIterator {
	ret := _m.Called(startKey, endKey)

	var r0 storage.StoreIterator
	if rf, ok := ret.Get(0).(func(string, string) storage.StoreIterator); ok {
		r0 = rf(startKey, endKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.StoreIterator)
		}
	}

	return r0
}

// Put provides a mock function with given fields: k, v
func (_m *MockStore) Put(k string, v []byte) error {
	ret := _m.Called(k, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(k, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
