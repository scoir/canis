// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	didexchange "github.com/hyperledger/aries-framework-go/pkg/client/didexchange"
	datastore "github.com/scoir/canis/pkg/datastore"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/hyperledger/aries-framework-go/pkg/storage"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// DeleteAgent provides a mock function with given fields: id
func (_m *Store) DeleteAgent(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSchema provides a mock function with given fields: id
func (_m *Store) DeleteSchema(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOffer provides a mock function with given fields: agentID, offerID
func (_m *Store) FindOffer(agentID string, offerID string) (*datastore.Credential, error) {
	ret := _m.Called(agentID, offerID)

	var r0 *datastore.Credential
	if rf, ok := ret.Get(0).(func(string, string) *datastore.Credential); ok {
		r0 = rf(agentID, offerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(agentID, offerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgent provides a mock function with given fields: id
func (_m *Store) GetAgent(id string) (*datastore.Agent, error) {
	ret := _m.Called(id)

	var r0 *datastore.Agent
	if rf, ok := ret.Get(0).(func(string) *datastore.Agent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Agent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentByPublicDID provides a mock function with given fields: DID
func (_m *Store) GetAgentByPublicDID(DID string) (*datastore.Agent, error) {
	ret := _m.Called(DID)

	var r0 *datastore.Agent
	if rf, ok := ret.Get(0).(func(string) *datastore.Agent); ok {
		r0 = rf(DID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Agent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(DID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentConnection provides a mock function with given fields: a, externalID
func (_m *Store) GetAgentConnection(a *datastore.Agent, externalID string) (*datastore.AgentConnection, error) {
	ret := _m.Called(a, externalID)

	var r0 *datastore.AgentConnection
	if rf, ok := ret.Get(0).(func(*datastore.Agent, string) *datastore.AgentConnection); ok {
		r0 = rf(a, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.AgentConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.Agent, string) error); ok {
		r1 = rf(a, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAriesProvider provides a mock function with given fields:
func (_m *Store) GetAriesProvider() (storage.Provider, error) {
	ret := _m.Called()

	var r0 storage.Provider
	if rf, ok := ret.Get(0).(func() storage.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicDID provides a mock function with given fields:
func (_m *Store) GetPublicDID() (*datastore.DID, error) {
	ret := _m.Called()

	var r0 *datastore.DID
	if rf, ok := ret.Get(0).(func() *datastore.DID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.DID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchema provides a mock function with given fields: id
func (_m *Store) GetSchema(id string) (*datastore.Schema, error) {
	ret := _m.Called(id)

	var r0 *datastore.Schema
	if rf, ok := ret.Get(0).(func(string) *datastore.Schema); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Schema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAgent provides a mock function with given fields: a
func (_m *Store) InsertAgent(a *datastore.Agent) (string, error) {
	ret := _m.Called(a)

	var r0 string
	if rf, ok := ret.Get(0).(func(*datastore.Agent) string); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.Agent) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAgentConnection provides a mock function with given fields: a, externalID, conn
func (_m *Store) InsertAgentConnection(a *datastore.Agent, externalID string, conn *didexchange.Connection) error {
	ret := _m.Called(a, externalID, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Agent, string, *didexchange.Connection) error); ok {
		r0 = rf(a, externalID, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertCredential provides a mock function with given fields: c
func (_m *Store) InsertCredential(c *datastore.Credential) (string, error) {
	ret := _m.Called(c)

	var r0 string
	if rf, ok := ret.Get(0).(func(*datastore.Credential) string); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.Credential) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDID provides a mock function with given fields: d
func (_m *Store) InsertDID(d *datastore.DID) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.DID) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertSchema provides a mock function with given fields: s
func (_m *Store) InsertSchema(s *datastore.Schema) (string, error) {
	ret := _m.Called(s)

	var r0 string
	if rf, ok := ret.Get(0).(func(*datastore.Schema) string); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.Schema) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgent provides a mock function with given fields: c
func (_m *Store) ListAgent(c *datastore.AgentCriteria) (*datastore.AgentList, error) {
	ret := _m.Called(c)

	var r0 *datastore.AgentList
	if rf, ok := ret.Get(0).(func(*datastore.AgentCriteria) *datastore.AgentList); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.AgentList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.AgentCriteria) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDIDs provides a mock function with given fields: c
func (_m *Store) ListDIDs(c *datastore.DIDCriteria) (*datastore.DIDList, error) {
	ret := _m.Called(c)

	var r0 *datastore.DIDList
	if rf, ok := ret.Get(0).(func(*datastore.DIDCriteria) *datastore.DIDList); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.DIDList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.DIDCriteria) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchema provides a mock function with given fields: c
func (_m *Store) ListSchema(c *datastore.SchemaCriteria) (*datastore.SchemaList, error) {
	ret := _m.Called(c)

	var r0 *datastore.SchemaList
	if rf, ok := ret.Get(0).(func(*datastore.SchemaCriteria) *datastore.SchemaList); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.SchemaList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datastore.SchemaCriteria) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPublicDID provides a mock function with given fields: DID
func (_m *Store) SetPublicDID(DID *datastore.DID) error {
	ret := _m.Called(DID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.DID) error); ok {
		r0 = rf(DID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAgent provides a mock function with given fields: a
func (_m *Store) UpdateAgent(a *datastore.Agent) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Agent) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSchema provides a mock function with given fields: s
func (_m *Store) UpdateSchema(s *datastore.Schema) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Schema) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
