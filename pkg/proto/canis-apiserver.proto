syntax = "proto3";
package apiserver;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "common/messages.proto";

option go_package = "apiserver/api";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Canis Admin API";
        version:"0.0.2";
        license: {
          name: "Apache 2.0";
          url: "http://www.apache.org/licenses/LICENSE-2.0.html";
        };
    };
    security_definitions {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "X-API-Key";
            }
        }
    }
    security: {
        security_requirement: {
            key: "ApiKeyAuth";
            value: {};
        }
    }
};


message PublicDIDRequest {
    string agent_name = 1;
    string did = 2;
    string verkey = 3;
}

message PublicDIDResponse {
}

message NewSchema {
    string name = 2;
    string version = 3;
    string type = 4;
    string format = 5;
    repeated string context = 6;
    repeated Attribute attributes = 7;
}

message Schema {
    string id = 1;
    string name = 2;
    string version = 3;
    string type = 4;
    string format = 5;
    repeated string context = 6;
    repeated Attribute attributes = 7;
}

message Attribute {
    string name = 1;
    enum Type {
        STRING = 0;
        NUMBER = 1;
        OBJECT = 2;
        ARRAY = 3;
        BOOL = 4;
        NULL = 5;
    }
    Type type = 2;
}

message CreateSchemaRequest {
    NewSchema schema = 1;
}
message CreateSchemaResponse {
    string id = 1;
}

message ListSchemaRequest {
    int64 start = 1;
    int64 page_size = 2;
    string name = 3;
    string version = 4;
}

message ListSchemaResponse {
    int64 count = 1;
    repeated Schema schema = 2;
}

message GetSchemaRequest {
    string id = 1;
}

message GetSchemaResponse {
    Schema schema = 1;
}

message DeleteSchemaRequest {
    string id = 1;
}
message DeleteSchemaResponse {
}

message UpdateSchemaRequest {
    Schema schema = 1;
}
message UpdateSchemaResponse {
}

message NewAgent {
    string name = 1;
    repeated string endorsable_schema_names = 2;
    bool public_did = 3;
}

message Agent {
    string id = 1;
    string name = 2;
    repeated string endorsable_schema_names = 3;
    enum Status {
        STARTING = 0;
        RUNNING = 1;
        ERROR = 2;
        TERMINATED = 3;
    }
    Status status = 4;
    bool public_did = 5;
}

message CreateAgentRequest {
    NewAgent agent = 1;
}
message CreateAgentResponse {
    string id = 1;
}

message ListAgentRequest {
    int64 start = 1;
    int64 page_size = 2;
    string name = 3;
}
message ListAgentResponse {
    int64 count = 1;
    repeated Agent agents = 2;
}

message GetAgentRequest {
    string id = 1;
}
message GetAgentResponse {
    Agent agent = 1;
}

message DeleteAgentRequest {
    string id = 1;
}
message DeleteAgentResponse {
}

message UpdateAgentRequest {
    Agent agent = 1;
}
message UpdateAgentResponse {
}


message LaunchAgentRequest {
    string id = 1;
    bool wait = 2;
}
message LaunchAgentResponse {
    Agent.Status status = 5;

}

message ShutdownAgentRequest {
    string id = 1;
}

message ShutdownAgentResponse {
}

message SeedPublicDIDRequest {
    string seed = 1;
}

message SeedPublicDIDResponse {
}

message Webhook {
    string url = 1;
}

message CreateWebhookRequest {
    string id = 1;
    repeated Webhook webhook = 2;
}

message CreateWebhookResponse {}

message DeleteWebhookRequest {
    string id = 1;
}
message DeleteWebhookResponse {}

message ListWebhookRequest {
    string id = 1;
}
message ListWebhookResponse {
    repeated Webhook hooks = 1;
}

message Connection {
    string their_label = 1;
    string my_label = 2;
    string their_did = 3;
    string my_did = 4;
    string connection_id = 5;
    string external_id = 6;
}

message DeleteConnectionRequest {
    string agent_name = 1;
    string external_id = 2;
}
message DeleteConnectionResponse {}

message ListConnectionRequest {
    string agent_name = 1;
}
message ListConnectionResponse {
    repeated Connection connections = 1;
}



service Admin {
    rpc CreateSchema (CreateSchemaRequest) returns (CreateSchemaResponse) {
        option (google.api.http) = {
            post: "/schema"
            body: "schema"
        };
    }
    rpc ListSchema (ListSchemaRequest) returns (ListSchemaResponse) {
        option (google.api.http) = {
            get: "/schema"
        };
    }
    rpc GetSchema (GetSchemaRequest) returns (GetSchemaResponse) {
        option (google.api.http) = {
            get: "/schema/{id}"
        };
    }
    rpc DeleteSchema (DeleteSchemaRequest) returns (DeleteSchemaResponse) {
        option (google.api.http) = {
            delete: "/schema/{id}"
        };
    }
    rpc UpdateSchema (UpdateSchemaRequest) returns (UpdateSchemaResponse) {
        option (google.api.http) = {
            post: "/schema/{schema.id}"
            body: "schema"
        };
    }

    rpc IssueCredential (common.IssueCredentialRequest) returns (common.IssueCredentialResponse) {
        option (google.api.http) = {
            post: "/agents/{agent_name}/credential/{external_id}/issue"
            body: "credential"
        };
    }

    rpc CreateAgent (CreateAgentRequest) returns (CreateAgentResponse) {
        option (google.api.http) = {
            post: "/agents"
            body: "agent"
        };
    }
    rpc ListAgent (ListAgentRequest) returns (ListAgentResponse) {
        option (google.api.http) = {
            get: "/agents"
        };
    }
    rpc GetAgent (GetAgentRequest) returns (GetAgentResponse) {
        option (google.api.http) = {
            get: "/agents/{id}"
        };
    }
    rpc DeleteAgent (DeleteAgentRequest) returns (DeleteAgentResponse) {
        option (google.api.http) = {
            delete: "/agents/{id}"
        };
    }
    rpc UpdateAgent (UpdateAgentRequest) returns (UpdateAgentResponse) {
        option (google.api.http) = {
            post: "/agents/{agent.id}"
            body: "agent"
        };
    }
    rpc GetAgentInvitation (common.InvitationRequest) returns (common.InvitationResponse) {
        option (google.api.http) = {
            get: "/agents/{agent_name}/invitation/{external_id}"
        };

    }
    rpc AcceptInvitation (common.AcceptInvitationRequest) returns (common.AcceptInvitationResponse) {
        option (google.api.http) = {
            post: "/agents/{agent_name}/invitation/{external_id}"
            body: "invitation"
        };

    }
    rpc ListConnections (ListConnectionRequest) returns (ListConnectionResponse) {
        option (google.api.http) = {
            get: "/agents/{agent_name}/connections"
        };
    }
    rpc DeleteConnection (DeleteConnectionRequest) returns (DeleteConnectionResponse) {
        option (google.api.http) = {
            delete: "/agents/{agent_name}/connections/{external_id}"
        };
    }
    rpc RequestPresentation(common.RequestPresentationRequest) returns (common.RequestPresentationResponse) {
      option (google.api.http) = {
        post: "/agents/{agent_name}/presentation/{external_id}/request"
        body: "presentation"
      };
    }

    rpc SeedPublicDID (SeedPublicDIDRequest) returns (SeedPublicDIDResponse) {}

    rpc CreateWebhook (CreateWebhookRequest) returns (CreateWebhookResponse) {
        option (google.api.http) = {
            post: "/webhooks/{id}"
            body: "*"
        };
    }
    rpc ListWebhook (ListWebhookRequest) returns (ListWebhookResponse) {
        option (google.api.http) = {
            get: "/webhooks/{id}"
        };
    }
    rpc DeleteWebhook (DeleteWebhookRequest) returns (DeleteWebhookResponse) {
        option (google.api.http) = {
            delete: "/webhooks/{id}"
        };
    }

    rpc RegisterEdgeAgent (common.RegisterEdgeAgentRequest) returns (common.RegisterEdgeAgentResponse) {
        option (google.api.http) = {
            post: "/edge/agents/register"
            body: "*"
        };

    }

}
