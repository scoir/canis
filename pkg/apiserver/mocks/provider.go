// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	datastore "github.com/scoir/canis/pkg/datastore"
	manager "github.com/scoir/canis/pkg/datastore/manager"

	mock "github.com/stretchr/testify/mock"

	vdr "github.com/scoir/canis/pkg/indy/wrapper/vdr"
)

// Provider is an autogenerated mock type for the provider type
type Provider struct {
	mock.Mock
}

// StorageManager provides a mock function with given fields:
func (_m *Provider) StorageManager() *manager.DataProviderManager {
	ret := _m.Called()

	var r0 *manager.DataProviderManager
	if rf, ok := ret.Get(0).(func() *manager.DataProviderManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manager.DataProviderManager)
		}
	}

	return r0
}

// StorageProvider provides a mock function with given fields:
func (_m *Provider) StorageProvider() (datastore.Provider, error) {
	ret := _m.Called()

	var r0 datastore.Provider
	if rf, ok := ret.Get(0).(func() datastore.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VDR provides a mock function with given fields:
func (_m *Provider) VDR() (*vdr.Client, error) {
	ret := _m.Called()

	var r0 *vdr.Client
	if rf, ok := ret.Get(0).(func() *vdr.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
