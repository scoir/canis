// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	clientdidexchange "github.com/hyperledger/aries-framework-go/pkg/client/didexchange"
	credential "github.com/scoir/canis/pkg/credential"

	datastore "github.com/scoir/canis/pkg/datastore"

	didexchange "github.com/scoir/canis/pkg/didexchange"

	issuecredential "github.com/hyperledger/aries-framework-go/pkg/client/issuecredential"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/scoir/canis/pkg/runtime"

	schema "github.com/scoir/canis/pkg/schema"
)

// Provider is an autogenerated mock type for the provider type
type Provider struct {
	mock.Mock
}

// Datastore provides a mock function with given fields:
func (_m *Provider) Datastore() (datastore.Store, error) {
	ret := _m.Called()

	var r0 datastore.Store
	if rf, ok := ret.Get(0).(func() datastore.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Executor provides a mock function with given fields:
func (_m *Provider) Executor() (runtime.Executor, error) {
	ret := _m.Called()

	var r0 runtime.Executor
	if rf, ok := ret.Get(0).(func() runtime.Executor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Executor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBouncer provides a mock function with given fields:
func (_m *Provider) GetBouncer() (didexchange.Bouncer, error) {
	ret := _m.Called()

	var r0 didexchange.Bouncer
	if rf, ok := ret.Get(0).(func() didexchange.Bouncer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(didexchange.Bouncer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentialClient provides a mock function with given fields:
func (_m *Provider) GetCredentialClient() (*issuecredential.Client, error) {
	ret := _m.Called()

	var r0 *issuecredential.Client
	if rf, ok := ret.Get(0).(func() *issuecredential.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*issuecredential.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDIDClient provides a mock function with given fields:
func (_m *Provider) GetDIDClient() (*clientdidexchange.Client, error) {
	ret := _m.Called()

	var r0 *clientdidexchange.Client
	if rf, ok := ret.Get(0).(func() *clientdidexchange.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientdidexchange.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaClient provides a mock function with given fields:
func (_m *Provider) GetSchemaClient() (*schema.Client, error) {
	ret := _m.Called()

	var r0 *schema.Client
	if rf, ok := ret.Get(0).(func() *schema.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupervisor provides a mock function with given fields: h
func (_m *Provider) GetSupervisor(h credential.Handler) (*credential.Supervisor, error) {
	ret := _m.Called(h)

	var r0 *credential.Supervisor
	if rf, ok := ret.Get(0).(func(credential.Handler) *credential.Supervisor); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Supervisor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(credential.Handler) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
