// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	vdr "github.com/scoir/canis/pkg/indy/wrapper/vdr"
	mock "github.com/stretchr/testify/mock"
)

// IndyVDRClient is an autogenerated mock type for the IndyVDRClient type
type IndyVDRClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IndyVDRClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAttrib provides a mock function with given fields: did, from, data, signer
func (_m *IndyVDRClient) CreateAttrib(did string, from string, data map[string]interface{}, signer vdr.Signer) error {
	ret := _m.Called(did, from, data, signer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}, vdr.Signer) error); ok {
		r0 = rf(did, from, data, signer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateClaimDef provides a mock function with given fields: from, ref, pubKey, revocation, signer
func (_m *IndyVDRClient) CreateClaimDef(from string, ref uint32, pubKey map[string]interface{}, revocation map[string]interface{}, signer vdr.Signer) (string, error) {
	ret := _m.Called(from, ref, pubKey, revocation, signer)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, uint32, map[string]interface{}, map[string]interface{}, vdr.Signer) string); ok {
		r0 = rf(from, ref, pubKey, revocation, signer)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint32, map[string]interface{}, map[string]interface{}, vdr.Signer) error); ok {
		r1 = rf(from, ref, pubKey, revocation, signer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNym provides a mock function with given fields: did, verkey, role, from, signer
func (_m *IndyVDRClient) CreateNym(did string, verkey string, role string, from string, signer vdr.Signer) error {
	ret := _m.Called(did, verkey, role, from, signer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, vdr.Signer) error); ok {
		r0 = rf(did, verkey, role, from, signer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSchema provides a mock function with given fields: issuerDID, name, version, attrs, signer
func (_m *IndyVDRClient) CreateSchema(issuerDID string, name string, version string, attrs []string, signer vdr.Signer) (string, error) {
	ret := _m.Called(issuerDID, name, version, attrs, signer)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, []string, vdr.Signer) string); ok {
		r0 = rf(issuerDID, name, version, attrs, signer)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []string, vdr.Signer) error); ok {
		r1 = rf(issuerDID, name, version, attrs, signer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Genesis provides a mock function with given fields:
func (_m *IndyVDRClient) Genesis() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetAcceptanceMethodList provides a mock function with given fields:
func (_m *IndyVDRClient) GetAcceptanceMethodList() (*vdr.ReadReply, error) {
	ret := _m.Called()

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func() *vdr.ReadReply); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttrib provides a mock function with given fields: did, raw
func (_m *IndyVDRClient) GetAttrib(did string, raw string) (*vdr.ReadReply, error) {
	ret := _m.Called(did, raw)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string, string) *vdr.ReadReply); ok {
		r0 = rf(did, raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(did, raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthRules provides a mock function with given fields:
func (_m *IndyVDRClient) GetAuthRules() (*vdr.ReadReply, error) {
	ret := _m.Called()

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func() *vdr.ReadReply); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredDef provides a mock function with given fields: credDefID
func (_m *IndyVDRClient) GetCredDef(credDefID string) (*vdr.ReadReply, error) {
	ret := _m.Called(credDefID)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string) *vdr.ReadReply); ok {
		r0 = rf(credDefID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(credDefID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEndpoint provides a mock function with given fields: did
func (_m *IndyVDRClient) GetEndpoint(did string) (*vdr.ReadReply, error) {
	ret := _m.Called(did)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string) *vdr.ReadReply); ok {
		r0 = rf(did)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNym provides a mock function with given fields: did
func (_m *IndyVDRClient) GetNym(did string) (*vdr.ReadReply, error) {
	ret := _m.Called(did)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string) *vdr.ReadReply); ok {
		r0 = rf(did)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoolStatus provides a mock function with given fields:
func (_m *IndyVDRClient) GetPoolStatus() (*vdr.PoolStatus, error) {
	ret := _m.Called()

	var r0 *vdr.PoolStatus
	if rf, ok := ret.Get(0).(func() *vdr.PoolStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.PoolStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchema provides a mock function with given fields: schemaID
func (_m *IndyVDRClient) GetSchema(schemaID string) (*vdr.ReadReply, error) {
	ret := _m.Called(schemaID)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string) *vdr.ReadReply); ok {
		r0 = rf(schemaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schemaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxnAuthorAgreement provides a mock function with given fields:
func (_m *IndyVDRClient) GetTxnAuthorAgreement() (*vdr.ReadReply, error) {
	ret := _m.Called()

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func() *vdr.ReadReply); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxnTypeAuthRule provides a mock function with given fields: typ, action, field
func (_m *IndyVDRClient) GetTxnTypeAuthRule(typ string, action string, field string) (*vdr.ReadReply, error) {
	ret := _m.Called(typ, action, field)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func(string, string, string) *vdr.ReadReply); ok {
		r0 = rf(typ, action, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(typ, action, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshPool provides a mock function with given fields:
func (_m *IndyVDRClient) RefreshPool() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEndpoint provides a mock function with given fields: did, from, ep, signer
func (_m *IndyVDRClient) SetEndpoint(did string, from string, ep string, signer vdr.Signer) error {
	ret := _m.Called(did, from, ep, signer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, vdr.Signer) error); ok {
		r0 = rf(did, from, ep, signer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Submit provides a mock function with given fields: request
func (_m *IndyVDRClient) Submit(request []byte) (*vdr.ReadReply, error) {
	ret := _m.Called(request)

	var r0 *vdr.ReadReply
	if rf, ok := ret.Get(0).(func([]byte) *vdr.ReadReply); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.ReadReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitWrite provides a mock function with given fields: req, signer
func (_m *IndyVDRClient) SubmitWrite(req *vdr.Request, signer vdr.Signer) (*vdr.WriteReply, error) {
	ret := _m.Called(req, signer)

	var r0 *vdr.WriteReply
	if rf, ok := ret.Get(0).(func(*vdr.Request, vdr.Signer) *vdr.WriteReply); ok {
		r0 = rf(req, signer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vdr.WriteReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*vdr.Request, vdr.Signer) error); ok {
		r1 = rf(req, signer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
